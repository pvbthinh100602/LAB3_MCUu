
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800270c  0800270c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800270c  0800270c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800270c  0800270c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000024  08002738  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002738  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096fa  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b50  00000000  00000000  00029747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002bce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e9c  00000000  00000000  0002c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be17  00000000  00000000  000434b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082454  00000000  00000000  0004f2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d171f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000282c  00000000  00000000  000d1774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080026d4 	.word	0x080026d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080026d4 	.word	0x080026d4

0800014c <button_reading>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

int button_flag[NO_OF_BUTTONS];

void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e063      	b.n	8000220 <button_reading+0xd4>
		debounce_buffer3[i] = debounce_buffer2[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4934      	ldr	r1, [pc, #208]	; (8000230 <button_reading+0xe4>)
 800015e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000162:	4934      	ldr	r1, [pc, #208]	; (8000234 <button_reading+0xe8>)
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 8000168:	79fa      	ldrb	r2, [r7, #7]
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	4932      	ldr	r1, [pc, #200]	; (8000238 <button_reading+0xec>)
 800016e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000172:	492f      	ldr	r1, [pc, #188]	; (8000230 <button_reading+0xe4>)
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer1[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON0_Pin << i);
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	2202      	movs	r2, #2
 800017c:	fa02 f303 	lsl.w	r3, r2, r3
 8000180:	b29b      	uxth	r3, r3
 8000182:	4619      	mov	r1, r3
 8000184:	482d      	ldr	r0, [pc, #180]	; (800023c <button_reading+0xf0>)
 8000186:	f001 fa65 	bl	8001654 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	4611      	mov	r1, r2
 8000192:	4a29      	ldr	r2, [pc, #164]	; (8000238 <button_reading+0xec>)
 8000194:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4a26      	ldr	r2, [pc, #152]	; (8000234 <button_reading+0xe8>)
 800019c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	4923      	ldr	r1, [pc, #140]	; (8000230 <button_reading+0xe4>)
 80001a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001a8:	429a      	cmp	r2, r3
 80001aa:	d136      	bne.n	800021a <button_reading+0xce>
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	4a20      	ldr	r2, [pc, #128]	; (8000230 <button_reading+0xe4>)
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	4920      	ldr	r1, [pc, #128]	; (8000238 <button_reading+0xec>)
 80001b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001bc:	429a      	cmp	r2, r3
 80001be:	d12c      	bne.n	800021a <button_reading+0xce>
			button_buffer[i] = debounce_buffer3[i];
 80001c0:	79fa      	ldrb	r2, [r7, #7]
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	491b      	ldr	r1, [pc, #108]	; (8000234 <button_reading+0xe8>)
 80001c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001ca:	491d      	ldr	r1, [pc, #116]	; (8000240 <button_reading+0xf4>)
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(button_buffer[i] == PRESSED_STATE){
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <button_reading+0xf4>)
 80001d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d119      	bne.n	8000210 <button_reading+0xc4>
				if(counter_for_button_pressed[i] > 0){
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	4a19      	ldr	r2, [pc, #100]	; (8000244 <button_reading+0xf8>)
 80001e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	dd08      	ble.n	80001fa <button_reading+0xae>
					counter_for_button_pressed[i]--;
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	4a16      	ldr	r2, [pc, #88]	; (8000244 <button_reading+0xf8>)
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	3a01      	subs	r2, #1
 80001f2:	4914      	ldr	r1, [pc, #80]	; (8000244 <button_reading+0xf8>)
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001f8:	e00f      	b.n	800021a <button_reading+0xce>
				} else{
					counter_for_button_pressed[i] = TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE;
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	4a11      	ldr	r2, [pc, #68]	; (8000244 <button_reading+0xf8>)
 80001fe:	2132      	movs	r1, #50	; 0x32
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[i] = 1;
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	4a10      	ldr	r2, [pc, #64]	; (8000248 <button_reading+0xfc>)
 8000208:	2101      	movs	r1, #1
 800020a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800020e:	e004      	b.n	800021a <button_reading+0xce>
				}
			} else {
				counter_for_button_pressed[i] = 0;
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <button_reading+0xf8>)
 8000214:	2100      	movs	r1, #0
 8000216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	3301      	adds	r3, #1
 800021e:	71fb      	strb	r3, [r7, #7]
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	2b02      	cmp	r3, #2
 8000224:	d998      	bls.n	8000158 <button_reading+0xc>
			}
		}
	}
}
 8000226:	bf00      	nop
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000058 	.word	0x20000058
 8000234:	20000064 	.word	0x20000064
 8000238:	2000004c 	.word	0x2000004c
 800023c:	40010800 	.word	0x40010800
 8000240:	20000040 	.word	0x20000040
 8000244:	20000070 	.word	0x20000070
 8000248:	20000090 	.word	0x20000090

0800024c <fsm_automatic_run>:
 *  Created on: Oct 12, 2022
 *      Author: phamv
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	switch (status) {
 8000250:	4b89      	ldr	r3, [pc, #548]	; (8000478 <fsm_automatic_run+0x22c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	3b01      	subs	r3, #1
 8000256:	2b04      	cmp	r3, #4
 8000258:	f200 81f9 	bhi.w	800064e <fsm_automatic_run+0x402>
 800025c:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <fsm_automatic_run+0x18>)
 800025e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000262:	bf00      	nop
 8000264:	08000279 	.word	0x08000279
 8000268:	080002cf 	.word	0x080002cf
 800026c:	0800039b 	.word	0x0800039b
 8000270:	080004a1 	.word	0x080004a1
 8000274:	08000575 	.word	0x08000575
		case INIT:
			//switch to AUTO_RED1
			status = AUTO_RED1;
 8000278:	4b7f      	ldr	r3, [pc, #508]	; (8000478 <fsm_automatic_run+0x22c>)
 800027a:	2202      	movs	r2, #2
 800027c:	601a      	str	r2, [r3, #0]
			setTimer1(config_green*1000);
 800027e:	4b7f      	ldr	r3, [pc, #508]	; (800047c <fsm_automatic_run+0x230>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000286:	fb02 f303 	mul.w	r3, r2, r3
 800028a:	4618      	mov	r0, r3
 800028c:	f000 fcf8 	bl	8000c80 <setTimer1>
			setTimer2(1000);
 8000290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000294:	f000 fd10 	bl	8000cb8 <setTimer2>
			counter_red = config_red;
 8000298:	4b79      	ldr	r3, [pc, #484]	; (8000480 <fsm_automatic_run+0x234>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a79      	ldr	r2, [pc, #484]	; (8000484 <fsm_automatic_run+0x238>)
 800029e:	6013      	str	r3, [r2, #0]
			counter_green = config_green;
 80002a0:	4b76      	ldr	r3, [pc, #472]	; (800047c <fsm_automatic_run+0x230>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a78      	ldr	r2, [pc, #480]	; (8000488 <fsm_automatic_run+0x23c>)
 80002a6:	6013      	str	r3, [r2, #0]
			display_traffic_7SEG(0, counter_red--);
 80002a8:	4b76      	ldr	r3, [pc, #472]	; (8000484 <fsm_automatic_run+0x238>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	1e5a      	subs	r2, r3, #1
 80002ae:	4975      	ldr	r1, [pc, #468]	; (8000484 <fsm_automatic_run+0x238>)
 80002b0:	600a      	str	r2, [r1, #0]
 80002b2:	4619      	mov	r1, r3
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 fe15 	bl	8000ee4 <display_traffic_7SEG>
			display_traffic_7SEG(1, counter_green--);
 80002ba:	4b73      	ldr	r3, [pc, #460]	; (8000488 <fsm_automatic_run+0x23c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	4971      	ldr	r1, [pc, #452]	; (8000488 <fsm_automatic_run+0x23c>)
 80002c2:	600a      	str	r2, [r1, #0]
 80002c4:	4619      	mov	r1, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 fe0c 	bl	8000ee4 <display_traffic_7SEG>
			break;
 80002cc:	e1c8      	b.n	8000660 <fsm_automatic_run+0x414>
		case AUTO_RED1:
			//TODO
			set_traffic1_red();
 80002ce:	f000 fd49 	bl	8000d64 <set_traffic1_red>
			set_traffic2_green();
 80002d2:	f000 fd8f 	bl	8000df4 <set_traffic2_green>

			if(timer1_flag == 1){
 80002d6:	4b6d      	ldr	r3, [pc, #436]	; (800048c <fsm_automatic_run+0x240>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d125      	bne.n	800032a <fsm_automatic_run+0xde>
				// time out, switch to AUTO_RED2
				status = AUTO_RED2;
 80002de:	4b66      	ldr	r3, [pc, #408]	; (8000478 <fsm_automatic_run+0x22c>)
 80002e0:	2203      	movs	r2, #3
 80002e2:	601a      	str	r2, [r3, #0]
				setTimer1(config_yellow*1000);
 80002e4:	4b6a      	ldr	r3, [pc, #424]	; (8000490 <fsm_automatic_run+0x244>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fcc5 	bl	8000c80 <setTimer1>
				counter_yellow = config_yellow;
 80002f6:	4b66      	ldr	r3, [pc, #408]	; (8000490 <fsm_automatic_run+0x244>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a66      	ldr	r2, [pc, #408]	; (8000494 <fsm_automatic_run+0x248>)
 80002fc:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_red--);
 80002fe:	4b61      	ldr	r3, [pc, #388]	; (8000484 <fsm_automatic_run+0x238>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	1e5a      	subs	r2, r3, #1
 8000304:	495f      	ldr	r1, [pc, #380]	; (8000484 <fsm_automatic_run+0x238>)
 8000306:	600a      	str	r2, [r1, #0]
 8000308:	4619      	mov	r1, r3
 800030a:	2000      	movs	r0, #0
 800030c:	f000 fdea 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_yellow--);
 8000310:	4b60      	ldr	r3, [pc, #384]	; (8000494 <fsm_automatic_run+0x248>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	1e5a      	subs	r2, r3, #1
 8000316:	495f      	ldr	r1, [pc, #380]	; (8000494 <fsm_automatic_run+0x248>)
 8000318:	600a      	str	r2, [r1, #0]
 800031a:	4619      	mov	r1, r3
 800031c:	2001      	movs	r0, #1
 800031e:	f000 fde1 	bl	8000ee4 <display_traffic_7SEG>
				setTimer2(1000);
 8000322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000326:	f000 fcc7 	bl	8000cb8 <setTimer2>
			}

			if(timer2_flag == 1){
 800032a:	4b5b      	ldr	r3, [pc, #364]	; (8000498 <fsm_automatic_run+0x24c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d115      	bne.n	800035e <fsm_automatic_run+0x112>
				//display and decrease led 7seg counter
				display_traffic_7SEG(0, counter_red--);
 8000332:	4b54      	ldr	r3, [pc, #336]	; (8000484 <fsm_automatic_run+0x238>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	1e5a      	subs	r2, r3, #1
 8000338:	4952      	ldr	r1, [pc, #328]	; (8000484 <fsm_automatic_run+0x238>)
 800033a:	600a      	str	r2, [r1, #0]
 800033c:	4619      	mov	r1, r3
 800033e:	2000      	movs	r0, #0
 8000340:	f000 fdd0 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_green--);
 8000344:	4b50      	ldr	r3, [pc, #320]	; (8000488 <fsm_automatic_run+0x23c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	1e5a      	subs	r2, r3, #1
 800034a:	494f      	ldr	r1, [pc, #316]	; (8000488 <fsm_automatic_run+0x23c>)
 800034c:	600a      	str	r2, [r1, #0]
 800034e:	4619      	mov	r1, r3
 8000350:	2001      	movs	r0, #1
 8000352:	f000 fdc7 	bl	8000ee4 <display_traffic_7SEG>
				setTimer2(1000);
 8000356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035a:	f000 fcad 	bl	8000cb8 <setTimer2>
			}

			if(button_flag[0] == 1){
 800035e:	4b4f      	ldr	r3, [pc, #316]	; (800049c <fsm_automatic_run+0x250>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b01      	cmp	r3, #1
 8000364:	f040 8175 	bne.w	8000652 <fsm_automatic_run+0x406>
				//button1 pressed, switch to MAN_RED
				button_flag[0] = 0;
 8000368:	4b4c      	ldr	r3, [pc, #304]	; (800049c <fsm_automatic_run+0x250>)
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 800036e:	4b42      	ldr	r3, [pc, #264]	; (8000478 <fsm_automatic_run+0x22c>)
 8000370:	220b      	movs	r2, #11
 8000372:	601a      	str	r2, [r3, #0]
				// set up for blinky led
				set_traffic1_red();
 8000374:	f000 fcf6 	bl	8000d64 <set_traffic1_red>
				set_traffic2_red();
 8000378:	f000 fd0c 	bl	8000d94 <set_traffic2_red>
				setTimer1(BLINKY_TIME);
 800037c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000380:	f000 fc7e 	bl	8000c80 <setTimer1>
				//set up for display 7seg
				display_traffic_7SEG(0, 1);
 8000384:	2101      	movs	r1, #1
 8000386:	2000      	movs	r0, #0
 8000388:	f000 fdac 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, config_red);
 800038c:	4b3c      	ldr	r3, [pc, #240]	; (8000480 <fsm_automatic_run+0x234>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4619      	mov	r1, r3
 8000392:	2001      	movs	r0, #1
 8000394:	f000 fda6 	bl	8000ee4 <display_traffic_7SEG>
			}
			break;
 8000398:	e15b      	b.n	8000652 <fsm_automatic_run+0x406>
		case AUTO_RED2:
			//TODO
			set_traffic1_red();
 800039a:	f000 fce3 	bl	8000d64 <set_traffic1_red>
			set_traffic2_yellow();
 800039e:	f000 fd59 	bl	8000e54 <set_traffic2_yellow>

			if(timer1_flag == 1){
 80003a2:	4b3a      	ldr	r3, [pc, #232]	; (800048c <fsm_automatic_run+0x240>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d129      	bne.n	80003fe <fsm_automatic_run+0x1b2>
				// time out, switch to AUTO_GREEN
				status = AUTO_GREEN;
 80003aa:	4b33      	ldr	r3, [pc, #204]	; (8000478 <fsm_automatic_run+0x22c>)
 80003ac:	2204      	movs	r2, #4
 80003ae:	601a      	str	r2, [r3, #0]
				setTimer1(config_green*1000);
 80003b0:	4b32      	ldr	r3, [pc, #200]	; (800047c <fsm_automatic_run+0x230>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003b8:	fb02 f303 	mul.w	r3, r2, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fc5f 	bl	8000c80 <setTimer1>
				counter_red = config_red;
 80003c2:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <fsm_automatic_run+0x234>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a2f      	ldr	r2, [pc, #188]	; (8000484 <fsm_automatic_run+0x238>)
 80003c8:	6013      	str	r3, [r2, #0]
				counter_green = config_green;
 80003ca:	4b2c      	ldr	r3, [pc, #176]	; (800047c <fsm_automatic_run+0x230>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a2e      	ldr	r2, [pc, #184]	; (8000488 <fsm_automatic_run+0x23c>)
 80003d0:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_green--);
 80003d2:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <fsm_automatic_run+0x23c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	1e5a      	subs	r2, r3, #1
 80003d8:	492b      	ldr	r1, [pc, #172]	; (8000488 <fsm_automatic_run+0x23c>)
 80003da:	600a      	str	r2, [r1, #0]
 80003dc:	4619      	mov	r1, r3
 80003de:	2000      	movs	r0, #0
 80003e0:	f000 fd80 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red--);
 80003e4:	4b27      	ldr	r3, [pc, #156]	; (8000484 <fsm_automatic_run+0x238>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	1e5a      	subs	r2, r3, #1
 80003ea:	4926      	ldr	r1, [pc, #152]	; (8000484 <fsm_automatic_run+0x238>)
 80003ec:	600a      	str	r2, [r1, #0]
 80003ee:	4619      	mov	r1, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	f000 fd77 	bl	8000ee4 <display_traffic_7SEG>
				setTimer2(1000);
 80003f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fa:	f000 fc5d 	bl	8000cb8 <setTimer2>
			}

			if(timer2_flag ==1){
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <fsm_automatic_run+0x24c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d115      	bne.n	8000432 <fsm_automatic_run+0x1e6>
				//display and decrease led 7seg counter
				display_traffic_7SEG(0, counter_red--);
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <fsm_automatic_run+0x238>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	1e5a      	subs	r2, r3, #1
 800040c:	491d      	ldr	r1, [pc, #116]	; (8000484 <fsm_automatic_run+0x238>)
 800040e:	600a      	str	r2, [r1, #0]
 8000410:	4619      	mov	r1, r3
 8000412:	2000      	movs	r0, #0
 8000414:	f000 fd66 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_yellow--);
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <fsm_automatic_run+0x248>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	1e5a      	subs	r2, r3, #1
 800041e:	491d      	ldr	r1, [pc, #116]	; (8000494 <fsm_automatic_run+0x248>)
 8000420:	600a      	str	r2, [r1, #0]
 8000422:	4619      	mov	r1, r3
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fd5d 	bl	8000ee4 <display_traffic_7SEG>
				setTimer2(1000);
 800042a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042e:	f000 fc43 	bl	8000cb8 <setTimer2>
			}

			if(button_flag[0] == 1){
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <fsm_automatic_run+0x250>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	f040 810d 	bne.w	8000656 <fsm_automatic_run+0x40a>
				//button1 pressed, switch to MAN_RED
				button_flag[0] = 0;
 800043c:	4b17      	ldr	r3, [pc, #92]	; (800049c <fsm_automatic_run+0x250>)
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 8000442:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <fsm_automatic_run+0x22c>)
 8000444:	220b      	movs	r2, #11
 8000446:	601a      	str	r2, [r3, #0]
				set_traffic1_red();
 8000448:	f000 fc8c 	bl	8000d64 <set_traffic1_red>
				set_traffic2_red();
 800044c:	f000 fca2 	bl	8000d94 <set_traffic2_red>
				// set up for blinky led
				setTimer1(BLINKY_TIME);
 8000450:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000454:	f000 fc14 	bl	8000c80 <setTimer1>
				//set up for display 7seg
				counter_red = config_red;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <fsm_automatic_run+0x234>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a09      	ldr	r2, [pc, #36]	; (8000484 <fsm_automatic_run+0x238>)
 800045e:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 1);
 8000460:	2101      	movs	r1, #1
 8000462:	2000      	movs	r0, #0
 8000464:	f000 fd3e 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red);
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <fsm_automatic_run+0x238>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4619      	mov	r1, r3
 800046e:	2001      	movs	r0, #1
 8000470:	f000 fd38 	bl	8000ee4 <display_traffic_7SEG>
			}
			break;
 8000474:	e0ef      	b.n	8000656 <fsm_automatic_run+0x40a>
 8000476:	bf00      	nop
 8000478:	2000007c 	.word	0x2000007c
 800047c:	20000004 	.word	0x20000004
 8000480:	20000000 	.word	0x20000000
 8000484:	2000000c 	.word	0x2000000c
 8000488:	20000010 	.word	0x20000010
 800048c:	20000080 	.word	0x20000080
 8000490:	20000008 	.word	0x20000008
 8000494:	20000014 	.word	0x20000014
 8000498:	20000084 	.word	0x20000084
 800049c:	20000090 	.word	0x20000090
		case AUTO_GREEN:
			//TODO
			set_traffic1_green();
 80004a0:	f000 fc90 	bl	8000dc4 <set_traffic1_green>
			set_traffic2_red();
 80004a4:	f000 fc76 	bl	8000d94 <set_traffic2_red>

			if(timer1_flag == 1){
 80004a8:	4b6e      	ldr	r3, [pc, #440]	; (8000664 <fsm_automatic_run+0x418>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d125      	bne.n	80004fc <fsm_automatic_run+0x2b0>
				// time out, switch to AUTO_YELLOW
				status = AUTO_YELLOW;
 80004b0:	4b6d      	ldr	r3, [pc, #436]	; (8000668 <fsm_automatic_run+0x41c>)
 80004b2:	2205      	movs	r2, #5
 80004b4:	601a      	str	r2, [r3, #0]
				setTimer1(config_yellow*1000);
 80004b6:	4b6d      	ldr	r3, [pc, #436]	; (800066c <fsm_automatic_run+0x420>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004be:	fb02 f303 	mul.w	r3, r2, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fbdc 	bl	8000c80 <setTimer1>
				counter_yellow = config_yellow;
 80004c8:	4b68      	ldr	r3, [pc, #416]	; (800066c <fsm_automatic_run+0x420>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a68      	ldr	r2, [pc, #416]	; (8000670 <fsm_automatic_run+0x424>)
 80004ce:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_yellow--);
 80004d0:	4b67      	ldr	r3, [pc, #412]	; (8000670 <fsm_automatic_run+0x424>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1e5a      	subs	r2, r3, #1
 80004d6:	4966      	ldr	r1, [pc, #408]	; (8000670 <fsm_automatic_run+0x424>)
 80004d8:	600a      	str	r2, [r1, #0]
 80004da:	4619      	mov	r1, r3
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 fd01 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red--);
 80004e2:	4b64      	ldr	r3, [pc, #400]	; (8000674 <fsm_automatic_run+0x428>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	4962      	ldr	r1, [pc, #392]	; (8000674 <fsm_automatic_run+0x428>)
 80004ea:	600a      	str	r2, [r1, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 fcf8 	bl	8000ee4 <display_traffic_7SEG>
				setTimer2(1000);
 80004f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f8:	f000 fbde 	bl	8000cb8 <setTimer2>
			}

			if(timer2_flag ==1){
 80004fc:	4b5e      	ldr	r3, [pc, #376]	; (8000678 <fsm_automatic_run+0x42c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d115      	bne.n	8000530 <fsm_automatic_run+0x2e4>
				//display and decrease led 7seg counter
				display_traffic_7SEG(0, counter_green--);
 8000504:	4b5d      	ldr	r3, [pc, #372]	; (800067c <fsm_automatic_run+0x430>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	495c      	ldr	r1, [pc, #368]	; (800067c <fsm_automatic_run+0x430>)
 800050c:	600a      	str	r2, [r1, #0]
 800050e:	4619      	mov	r1, r3
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fce7 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red--);
 8000516:	4b57      	ldr	r3, [pc, #348]	; (8000674 <fsm_automatic_run+0x428>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	1e5a      	subs	r2, r3, #1
 800051c:	4955      	ldr	r1, [pc, #340]	; (8000674 <fsm_automatic_run+0x428>)
 800051e:	600a      	str	r2, [r1, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fcde 	bl	8000ee4 <display_traffic_7SEG>
				setTimer2(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052c:	f000 fbc4 	bl	8000cb8 <setTimer2>
			}

			if(button_flag[0] == 1){
 8000530:	4b53      	ldr	r3, [pc, #332]	; (8000680 <fsm_automatic_run+0x434>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	f040 8090 	bne.w	800065a <fsm_automatic_run+0x40e>
				//button1 pressed, switch to MAN_RED
				button_flag[0] = 0;
 800053a:	4b51      	ldr	r3, [pc, #324]	; (8000680 <fsm_automatic_run+0x434>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 8000540:	4b49      	ldr	r3, [pc, #292]	; (8000668 <fsm_automatic_run+0x41c>)
 8000542:	220b      	movs	r2, #11
 8000544:	601a      	str	r2, [r3, #0]
				// set up for blinky led
				set_traffic1_red();
 8000546:	f000 fc0d 	bl	8000d64 <set_traffic1_red>
				set_traffic2_red();
 800054a:	f000 fc23 	bl	8000d94 <set_traffic2_red>
				setTimer1(BLINKY_TIME);
 800054e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000552:	f000 fb95 	bl	8000c80 <setTimer1>
				//set up for display 7seg
				counter_red = config_red;
 8000556:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <fsm_automatic_run+0x438>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a46      	ldr	r2, [pc, #280]	; (8000674 <fsm_automatic_run+0x428>)
 800055c:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 1);
 800055e:	2101      	movs	r1, #1
 8000560:	2000      	movs	r0, #0
 8000562:	f000 fcbf 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red);
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <fsm_automatic_run+0x428>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fcb9 	bl	8000ee4 <display_traffic_7SEG>
			}
			break;
 8000572:	e072      	b.n	800065a <fsm_automatic_run+0x40e>
		case AUTO_YELLOW:
			//TODO
			set_traffic1_yellow();
 8000574:	f000 fc56 	bl	8000e24 <set_traffic1_yellow>
			set_traffic2_red();
 8000578:	f000 fc0c 	bl	8000d94 <set_traffic2_red>

			if(timer1_flag == 1){
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <fsm_automatic_run+0x418>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d129      	bne.n	80005d8 <fsm_automatic_run+0x38c>
				// time out, switch to AUTO_RED1
				status = AUTO_RED1;
 8000584:	4b38      	ldr	r3, [pc, #224]	; (8000668 <fsm_automatic_run+0x41c>)
 8000586:	2202      	movs	r2, #2
 8000588:	601a      	str	r2, [r3, #0]
				setTimer1(config_green*1000);
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <fsm_automatic_run+0x43c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fb72 	bl	8000c80 <setTimer1>
				counter_red = config_red;
 800059c:	4b39      	ldr	r3, [pc, #228]	; (8000684 <fsm_automatic_run+0x438>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a34      	ldr	r2, [pc, #208]	; (8000674 <fsm_automatic_run+0x428>)
 80005a2:	6013      	str	r3, [r2, #0]
				counter_green = config_green;
 80005a4:	4b38      	ldr	r3, [pc, #224]	; (8000688 <fsm_automatic_run+0x43c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a34      	ldr	r2, [pc, #208]	; (800067c <fsm_automatic_run+0x430>)
 80005aa:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_red--);
 80005ac:	4b31      	ldr	r3, [pc, #196]	; (8000674 <fsm_automatic_run+0x428>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	4930      	ldr	r1, [pc, #192]	; (8000674 <fsm_automatic_run+0x428>)
 80005b4:	600a      	str	r2, [r1, #0]
 80005b6:	4619      	mov	r1, r3
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 fc93 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_green--);
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <fsm_automatic_run+0x430>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	492d      	ldr	r1, [pc, #180]	; (800067c <fsm_automatic_run+0x430>)
 80005c6:	600a      	str	r2, [r1, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 fc8a 	bl	8000ee4 <display_traffic_7SEG>
				setTimer2(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f000 fb70 	bl	8000cb8 <setTimer2>
			}

			if(timer2_flag ==1){
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <fsm_automatic_run+0x42c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d115      	bne.n	800060c <fsm_automatic_run+0x3c0>
				//display and decrease led 7seg counter
				display_traffic_7SEG(0, counter_yellow--);
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <fsm_automatic_run+0x424>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	1e5a      	subs	r2, r3, #1
 80005e6:	4922      	ldr	r1, [pc, #136]	; (8000670 <fsm_automatic_run+0x424>)
 80005e8:	600a      	str	r2, [r1, #0]
 80005ea:	4619      	mov	r1, r3
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fc79 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red--);
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <fsm_automatic_run+0x428>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	491e      	ldr	r1, [pc, #120]	; (8000674 <fsm_automatic_run+0x428>)
 80005fa:	600a      	str	r2, [r1, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 fc70 	bl	8000ee4 <display_traffic_7SEG>
				setTimer2(1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 fb56 	bl	8000cb8 <setTimer2>
			}

			if(button_flag[0] == 1){
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <fsm_automatic_run+0x434>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d124      	bne.n	800065e <fsm_automatic_run+0x412>
				//button1 pressed, switch to MAN_RED
				button_flag[0] = 0;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <fsm_automatic_run+0x434>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <fsm_automatic_run+0x41c>)
 800061c:	220b      	movs	r2, #11
 800061e:	601a      	str	r2, [r3, #0]
				// set up for blinky led
				set_traffic1_red();
 8000620:	f000 fba0 	bl	8000d64 <set_traffic1_red>
				set_traffic2_red();
 8000624:	f000 fbb6 	bl	8000d94 <set_traffic2_red>
				setTimer1(BLINKY_TIME);
 8000628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062c:	f000 fb28 	bl	8000c80 <setTimer1>
				//set up for display 7seg
				counter_red = config_red;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <fsm_automatic_run+0x438>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <fsm_automatic_run+0x428>)
 8000636:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 1);
 8000638:	2101      	movs	r1, #1
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fc52 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red);
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <fsm_automatic_run+0x428>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fc4c 	bl	8000ee4 <display_traffic_7SEG>
			}
			break;
 800064c:	e007      	b.n	800065e <fsm_automatic_run+0x412>
		default:
			break;
 800064e:	bf00      	nop
 8000650:	e006      	b.n	8000660 <fsm_automatic_run+0x414>
			break;
 8000652:	bf00      	nop
 8000654:	e004      	b.n	8000660 <fsm_automatic_run+0x414>
			break;
 8000656:	bf00      	nop
 8000658:	e002      	b.n	8000660 <fsm_automatic_run+0x414>
			break;
 800065a:	bf00      	nop
 800065c:	e000      	b.n	8000660 <fsm_automatic_run+0x414>
			break;
 800065e:	bf00      	nop
	}
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000080 	.word	0x20000080
 8000668:	2000007c 	.word	0x2000007c
 800066c:	20000008 	.word	0x20000008
 8000670:	20000014 	.word	0x20000014
 8000674:	2000000c 	.word	0x2000000c
 8000678:	20000084 	.word	0x20000084
 800067c:	20000010 	.word	0x20000010
 8000680:	20000090 	.word	0x20000090
 8000684:	20000000 	.word	0x20000000
 8000688:	20000004 	.word	0x20000004

0800068c <fsm_manual_run>:
 *      Author: phamv
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch (status) {
 8000690:	4ba0      	ldr	r3, [pc, #640]	; (8000914 <fsm_manual_run+0x288>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b0d      	cmp	r3, #13
 8000696:	f000 80cc 	beq.w	8000832 <fsm_manual_run+0x1a6>
 800069a:	2b0d      	cmp	r3, #13
 800069c:	f300 8130 	bgt.w	8000900 <fsm_manual_run+0x274>
 80006a0:	2b0b      	cmp	r3, #11
 80006a2:	d002      	beq.n	80006aa <fsm_manual_run+0x1e>
 80006a4:	2b0c      	cmp	r3, #12
 80006a6:	d062      	beq.n	800076e <fsm_manual_run+0xe2>
				display_traffic_7SEG(0, counter_red--);
				display_traffic_7SEG(1, counter_green--);
			}
			break;
		default:
			break;
 80006a8:	e12a      	b.n	8000900 <fsm_manual_run+0x274>
			if(timer1_flag == 1){
 80006aa:	4b9b      	ldr	r3, [pc, #620]	; (8000918 <fsm_manual_run+0x28c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d105      	bne.n	80006be <fsm_manual_run+0x32>
				toggle_traffic_red();
 80006b2:	f000 fbe7 	bl	8000e84 <toggle_traffic_red>
				setTimer1(BLINKY_TIME);
 80006b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ba:	f000 fae1 	bl	8000c80 <setTimer1>
			if(button_flag[1] == 1){
 80006be:	4b97      	ldr	r3, [pc, #604]	; (800091c <fsm_manual_run+0x290>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d114      	bne.n	80006f0 <fsm_manual_run+0x64>
				button_flag[1] = 0;
 80006c6:	4b95      	ldr	r3, [pc, #596]	; (800091c <fsm_manual_run+0x290>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
				counter_red++;
 80006cc:	4b94      	ldr	r3, [pc, #592]	; (8000920 <fsm_manual_run+0x294>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4a93      	ldr	r2, [pc, #588]	; (8000920 <fsm_manual_run+0x294>)
 80006d4:	6013      	str	r3, [r2, #0]
				if(counter_red > 99) counter_red = 2;
 80006d6:	4b92      	ldr	r3, [pc, #584]	; (8000920 <fsm_manual_run+0x294>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b63      	cmp	r3, #99	; 0x63
 80006dc:	dd02      	ble.n	80006e4 <fsm_manual_run+0x58>
 80006de:	4b90      	ldr	r3, [pc, #576]	; (8000920 <fsm_manual_run+0x294>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
				display_traffic_7SEG(1, counter_red);
 80006e4:	4b8e      	ldr	r3, [pc, #568]	; (8000920 <fsm_manual_run+0x294>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fbfa 	bl	8000ee4 <display_traffic_7SEG>
			if(button_flag[2] == 1){
 80006f0:	4b8a      	ldr	r3, [pc, #552]	; (800091c <fsm_manual_run+0x290>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d118      	bne.n	800072a <fsm_manual_run+0x9e>
				button_flag[2] = 0;
 80006f8:	4b88      	ldr	r3, [pc, #544]	; (800091c <fsm_manual_run+0x290>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
				config_red = counter_red;
 80006fe:	4b88      	ldr	r3, [pc, #544]	; (8000920 <fsm_manual_run+0x294>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a88      	ldr	r2, [pc, #544]	; (8000924 <fsm_manual_run+0x298>)
 8000704:	6013      	str	r3, [r2, #0]
				if(config_red <= config_green){
 8000706:	4b87      	ldr	r3, [pc, #540]	; (8000924 <fsm_manual_run+0x298>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4b87      	ldr	r3, [pc, #540]	; (8000928 <fsm_manual_run+0x29c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	429a      	cmp	r2, r3
 8000710:	dc04      	bgt.n	800071c <fsm_manual_run+0x90>
					config_green = config_red - 1;
 8000712:	4b84      	ldr	r3, [pc, #528]	; (8000924 <fsm_manual_run+0x298>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	4a83      	ldr	r2, [pc, #524]	; (8000928 <fsm_manual_run+0x29c>)
 800071a:	6013      	str	r3, [r2, #0]
				config_yellow = config_red - config_green;
 800071c:	4b81      	ldr	r3, [pc, #516]	; (8000924 <fsm_manual_run+0x298>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b81      	ldr	r3, [pc, #516]	; (8000928 <fsm_manual_run+0x29c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	4a81      	ldr	r2, [pc, #516]	; (800092c <fsm_manual_run+0x2a0>)
 8000728:	6013      	str	r3, [r2, #0]
			if(button_flag[0] == 1){
 800072a:	4b7c      	ldr	r3, [pc, #496]	; (800091c <fsm_manual_run+0x290>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	f040 80e8 	bne.w	8000904 <fsm_manual_run+0x278>
				status = MAN_GREEN;
 8000734:	4b77      	ldr	r3, [pc, #476]	; (8000914 <fsm_manual_run+0x288>)
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
				button_flag[0] = 0;
 800073a:	4b78      	ldr	r3, [pc, #480]	; (800091c <fsm_manual_run+0x290>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
				set_traffic1_green();
 8000740:	f000 fb40 	bl	8000dc4 <set_traffic1_green>
				set_traffic2_green();
 8000744:	f000 fb56 	bl	8000df4 <set_traffic2_green>
				setTimer1(BLINKY_TIME);
 8000748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074c:	f000 fa98 	bl	8000c80 <setTimer1>
				counter_green = config_green;
 8000750:	4b75      	ldr	r3, [pc, #468]	; (8000928 <fsm_manual_run+0x29c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a76      	ldr	r2, [pc, #472]	; (8000930 <fsm_manual_run+0x2a4>)
 8000756:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 2);
 8000758:	2102      	movs	r1, #2
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fbc2 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_green);
 8000760:	4b73      	ldr	r3, [pc, #460]	; (8000930 <fsm_manual_run+0x2a4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fbbc 	bl	8000ee4 <display_traffic_7SEG>
			break;
 800076c:	e0ca      	b.n	8000904 <fsm_manual_run+0x278>
			if(timer1_flag == 1){
 800076e:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <fsm_manual_run+0x28c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d105      	bne.n	8000782 <fsm_manual_run+0xf6>
				toggle_traffic_green();
 8000776:	f000 fb95 	bl	8000ea4 <toggle_traffic_green>
				setTimer1(BLINKY_TIME);
 800077a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077e:	f000 fa7f 	bl	8000c80 <setTimer1>
			if(button_flag[1] == 1){
 8000782:	4b66      	ldr	r3, [pc, #408]	; (800091c <fsm_manual_run+0x290>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d114      	bne.n	80007b4 <fsm_manual_run+0x128>
				button_flag[1] = 0;
 800078a:	4b64      	ldr	r3, [pc, #400]	; (800091c <fsm_manual_run+0x290>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
				counter_green++;
 8000790:	4b67      	ldr	r3, [pc, #412]	; (8000930 <fsm_manual_run+0x2a4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a66      	ldr	r2, [pc, #408]	; (8000930 <fsm_manual_run+0x2a4>)
 8000798:	6013      	str	r3, [r2, #0]
				if(counter_green > 99) counter_green = 1;
 800079a:	4b65      	ldr	r3, [pc, #404]	; (8000930 <fsm_manual_run+0x2a4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b63      	cmp	r3, #99	; 0x63
 80007a0:	dd02      	ble.n	80007a8 <fsm_manual_run+0x11c>
 80007a2:	4b63      	ldr	r3, [pc, #396]	; (8000930 <fsm_manual_run+0x2a4>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
				display_traffic_7SEG(1, counter_green);
 80007a8:	4b61      	ldr	r3, [pc, #388]	; (8000930 <fsm_manual_run+0x2a4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 fb98 	bl	8000ee4 <display_traffic_7SEG>
			if(button_flag[2] == 1){
 80007b4:	4b59      	ldr	r3, [pc, #356]	; (800091c <fsm_manual_run+0x290>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d118      	bne.n	80007ee <fsm_manual_run+0x162>
				button_flag[2] = 0;
 80007bc:	4b57      	ldr	r3, [pc, #348]	; (800091c <fsm_manual_run+0x290>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
				config_green = counter_green;
 80007c2:	4b5b      	ldr	r3, [pc, #364]	; (8000930 <fsm_manual_run+0x2a4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a58      	ldr	r2, [pc, #352]	; (8000928 <fsm_manual_run+0x29c>)
 80007c8:	6013      	str	r3, [r2, #0]
				if(config_red <= config_green){
 80007ca:	4b56      	ldr	r3, [pc, #344]	; (8000924 <fsm_manual_run+0x298>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b56      	ldr	r3, [pc, #344]	; (8000928 <fsm_manual_run+0x29c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dc04      	bgt.n	80007e0 <fsm_manual_run+0x154>
					config_red = config_green + 1;
 80007d6:	4b54      	ldr	r3, [pc, #336]	; (8000928 <fsm_manual_run+0x29c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	4a51      	ldr	r2, [pc, #324]	; (8000924 <fsm_manual_run+0x298>)
 80007de:	6013      	str	r3, [r2, #0]
				config_yellow = config_red - config_green;
 80007e0:	4b50      	ldr	r3, [pc, #320]	; (8000924 <fsm_manual_run+0x298>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b50      	ldr	r3, [pc, #320]	; (8000928 <fsm_manual_run+0x29c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	4a50      	ldr	r2, [pc, #320]	; (800092c <fsm_manual_run+0x2a0>)
 80007ec:	6013      	str	r3, [r2, #0]
			if(button_flag[0] == 1){
 80007ee:	4b4b      	ldr	r3, [pc, #300]	; (800091c <fsm_manual_run+0x290>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	f040 8088 	bne.w	8000908 <fsm_manual_run+0x27c>
				status = MAN_YELLOW;
 80007f8:	4b46      	ldr	r3, [pc, #280]	; (8000914 <fsm_manual_run+0x288>)
 80007fa:	220d      	movs	r2, #13
 80007fc:	601a      	str	r2, [r3, #0]
				button_flag[0] = 0;
 80007fe:	4b47      	ldr	r3, [pc, #284]	; (800091c <fsm_manual_run+0x290>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
				set_traffic1_yellow();
 8000804:	f000 fb0e 	bl	8000e24 <set_traffic1_yellow>
				set_traffic2_yellow();
 8000808:	f000 fb24 	bl	8000e54 <set_traffic2_yellow>
				setTimer1(BLINKY_TIME);
 800080c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000810:	f000 fa36 	bl	8000c80 <setTimer1>
				counter_yellow = config_yellow;
 8000814:	4b45      	ldr	r3, [pc, #276]	; (800092c <fsm_manual_run+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a46      	ldr	r2, [pc, #280]	; (8000934 <fsm_manual_run+0x2a8>)
 800081a:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 3);
 800081c:	2103      	movs	r1, #3
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fb60 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_yellow);
 8000824:	4b43      	ldr	r3, [pc, #268]	; (8000934 <fsm_manual_run+0x2a8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	2001      	movs	r0, #1
 800082c:	f000 fb5a 	bl	8000ee4 <display_traffic_7SEG>
			break;
 8000830:	e06a      	b.n	8000908 <fsm_manual_run+0x27c>
			if(timer1_flag == 1){
 8000832:	4b39      	ldr	r3, [pc, #228]	; (8000918 <fsm_manual_run+0x28c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d105      	bne.n	8000846 <fsm_manual_run+0x1ba>
				toggle_traffic_yellow();
 800083a:	f000 fb43 	bl	8000ec4 <toggle_traffic_yellow>
				setTimer1(BLINKY_TIME);
 800083e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000842:	f000 fa1d 	bl	8000c80 <setTimer1>
			if(button_flag[1] == 1){
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <fsm_manual_run+0x290>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d114      	bne.n	8000878 <fsm_manual_run+0x1ec>
				button_flag[1] = 0;
 800084e:	4b33      	ldr	r3, [pc, #204]	; (800091c <fsm_manual_run+0x290>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
				counter_yellow++;
 8000854:	4b37      	ldr	r3, [pc, #220]	; (8000934 <fsm_manual_run+0x2a8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a36      	ldr	r2, [pc, #216]	; (8000934 <fsm_manual_run+0x2a8>)
 800085c:	6013      	str	r3, [r2, #0]
				if(counter_yellow > 99) counter_yellow = 1;
 800085e:	4b35      	ldr	r3, [pc, #212]	; (8000934 <fsm_manual_run+0x2a8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b63      	cmp	r3, #99	; 0x63
 8000864:	dd02      	ble.n	800086c <fsm_manual_run+0x1e0>
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <fsm_manual_run+0x2a8>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
				display_traffic_7SEG(1, counter_yellow);
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <fsm_manual_run+0x2a8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	2001      	movs	r0, #1
 8000874:	f000 fb36 	bl	8000ee4 <display_traffic_7SEG>
			if(button_flag[2] == 1){
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <fsm_manual_run+0x290>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10d      	bne.n	800089c <fsm_manual_run+0x210>
				button_flag[2] = 0;
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <fsm_manual_run+0x290>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
				config_yellow = counter_yellow;
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <fsm_manual_run+0x2a8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a28      	ldr	r2, [pc, #160]	; (800092c <fsm_manual_run+0x2a0>)
 800088c:	6013      	str	r3, [r2, #0]
				config_red = config_yellow + config_green;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <fsm_manual_run+0x2a0>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <fsm_manual_run+0x29c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a22      	ldr	r2, [pc, #136]	; (8000924 <fsm_manual_run+0x298>)
 800089a:	6013      	str	r3, [r2, #0]
			if(button_flag[0] == 1){
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <fsm_manual_run+0x290>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d133      	bne.n	800090c <fsm_manual_run+0x280>
				status = AUTO_RED1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <fsm_manual_run+0x288>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	601a      	str	r2, [r3, #0]
				button_flag[0] = 0;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <fsm_manual_run+0x290>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
				setTimer1(config_green*1000);
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <fsm_manual_run+0x29c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b8:	fb02 f303 	mul.w	r3, r2, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f9df 	bl	8000c80 <setTimer1>
				setTimer2(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f000 f9f7 	bl	8000cb8 <setTimer2>
				counter_red = config_red;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <fsm_manual_run+0x298>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <fsm_manual_run+0x294>)
 80008d0:	6013      	str	r3, [r2, #0]
				counter_green = config_green;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <fsm_manual_run+0x29c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <fsm_manual_run+0x2a4>)
 80008d8:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_red--);
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <fsm_manual_run+0x294>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	490f      	ldr	r1, [pc, #60]	; (8000920 <fsm_manual_run+0x294>)
 80008e2:	600a      	str	r2, [r1, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 fafc 	bl	8000ee4 <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_green--);
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <fsm_manual_run+0x2a4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	490f      	ldr	r1, [pc, #60]	; (8000930 <fsm_manual_run+0x2a4>)
 80008f4:	600a      	str	r2, [r1, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 faf3 	bl	8000ee4 <display_traffic_7SEG>
			break;
 80008fe:	e005      	b.n	800090c <fsm_manual_run+0x280>
			break;
 8000900:	bf00      	nop
 8000902:	e004      	b.n	800090e <fsm_manual_run+0x282>
			break;
 8000904:	bf00      	nop
 8000906:	e002      	b.n	800090e <fsm_manual_run+0x282>
			break;
 8000908:	bf00      	nop
 800090a:	e000      	b.n	800090e <fsm_manual_run+0x282>
			break;
 800090c:	bf00      	nop
	}
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000007c 	.word	0x2000007c
 8000918:	20000080 	.word	0x20000080
 800091c:	20000090 	.word	0x20000090
 8000920:	2000000c 	.word	0x2000000c
 8000924:	20000000 	.word	0x20000000
 8000928:	20000004 	.word	0x20000004
 800092c:	20000008 	.word	0x20000008
 8000930:	20000010 	.word	0x20000010
 8000934:	20000014 	.word	0x20000014

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 fba0 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f814 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f000 f89a 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000948:	f000 f84c 	bl	80009e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <main+0x2c>)
 800094e:	f001 fb01 	bl	8001f54 <HAL_TIM_Base_Start_IT>
  status = INIT;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <main+0x30>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic_run();
 8000958:	f7ff fc78 	bl	800024c <fsm_automatic_run>
	  fsm_manual_run();
 800095c:	f7ff fe96 	bl	800068c <fsm_manual_run>
	  fsm_automatic_run();
 8000960:	e7fa      	b.n	8000958 <main+0x20>
 8000962:	bf00      	nop
 8000964:	2000009c 	.word	0x2000009c
 8000968:	2000007c 	.word	0x2000007c

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b090      	sub	sp, #64	; 0x40
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0318 	add.w	r3, r7, #24
 8000976:	2228      	movs	r2, #40	; 0x28
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fea2 	bl	80026c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000992:	2301      	movs	r3, #1
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000996:	2310      	movs	r3, #16
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 0318 	add.w	r3, r7, #24
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fe9e 	bl	80016e4 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009ae:	f000 f8d3 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 f90a 	bl	8001be4 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f8bf 	bl	8000b58 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3740      	adds	r7, #64	; 0x40
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a2a:	f001 fa43 	bl	8001eb4 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a34:	f000 f890 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a46:	f001 fbd9 	bl	80021fc <HAL_TIM_ConfigClockSource>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a50:	f000 f882 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a62:	f001 fda1 	bl	80025a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 f874 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000009c 	.word	0x2000009c

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_GPIO_Init+0xd0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <MX_GPIO_Init+0xd0>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <MX_GPIO_Init+0xd0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <MX_GPIO_Init+0xd0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a27      	ldr	r2, [pc, #156]	; (8000b4c <MX_GPIO_Init+0xd0>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <MX_GPIO_Init+0xd0>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CHECK_Pin|LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f64f 4120 	movw	r1, #64544	; 0xfc20
 8000ac6:	4822      	ldr	r0, [pc, #136]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000ac8:	f000 fddb 	bl	8001682 <HAL_GPIO_WritePin>
                          |LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRIVER_7SEG_A0_Pin|DRIVER_7SEG_B0_Pin|DRIVER_7SEG_C0_Pin|DRIVER_7SEG_C2_Pin
 8000acc:	2200      	movs	r2, #0
 8000ace:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad2:	4820      	ldr	r0, [pc, #128]	; (8000b54 <MX_GPIO_Init+0xd8>)
 8000ad4:	f000 fdd5 	bl	8001682 <HAL_GPIO_WritePin>
                          |DRIVER_7SEG_D2_Pin|DRIVER_7SEG_A3_Pin|DRIVER_7SEG_B3_Pin|DRIVER_7SEG_C3_Pin
                          |DRIVER_7SEG_D3_Pin|DRIVER_7SEG_D0_Pin|DRIVER_7SEG_A1_Pin|DRIVER_7SEG_B1_Pin
                          |DRIVER_7SEG_C1_Pin|DRIVER_7SEG_D1_Pin|DRIVER_7SEG_A2_Pin|DRIVER_7SEG_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4819      	ldr	r0, [pc, #100]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000aec:	f000 fc38 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8000af0:	230c      	movs	r3, #12
 8000af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4619      	mov	r1, r3
 8000b02:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000b04:	f000 fc2c 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CHECK_Pin LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin
                           LED_RED2_Pin LED_GREEN2_Pin LED_YELLOW2_Pin */
  GPIO_InitStruct.Pin = LED_CHECK_Pin|LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin
 8000b08:	f64f 4320 	movw	r3, #64544	; 0xfc20
 8000b0c:	60bb      	str	r3, [r7, #8]
                          |LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2302      	movs	r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000b22:	f000 fc1d 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRIVER_7SEG_A0_Pin DRIVER_7SEG_B0_Pin DRIVER_7SEG_C0_Pin DRIVER_7SEG_C2_Pin
                           DRIVER_7SEG_D2_Pin DRIVER_7SEG_A3_Pin DRIVER_7SEG_B3_Pin DRIVER_7SEG_C3_Pin
                           DRIVER_7SEG_D3_Pin DRIVER_7SEG_D0_Pin DRIVER_7SEG_A1_Pin DRIVER_7SEG_B1_Pin
                           DRIVER_7SEG_C1_Pin DRIVER_7SEG_D1_Pin DRIVER_7SEG_A2_Pin DRIVER_7SEG_B2_Pin */
  GPIO_InitStruct.Pin = DRIVER_7SEG_A0_Pin|DRIVER_7SEG_B0_Pin|DRIVER_7SEG_C0_Pin|DRIVER_7SEG_C2_Pin
 8000b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2a:	60bb      	str	r3, [r7, #8]
                          |DRIVER_7SEG_D2_Pin|DRIVER_7SEG_A3_Pin|DRIVER_7SEG_B3_Pin|DRIVER_7SEG_C3_Pin
                          |DRIVER_7SEG_D3_Pin|DRIVER_7SEG_D0_Pin|DRIVER_7SEG_A1_Pin|DRIVER_7SEG_B1_Pin
                          |DRIVER_7SEG_C1_Pin|DRIVER_7SEG_D1_Pin|DRIVER_7SEG_A2_Pin|DRIVER_7SEG_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_GPIO_Init+0xd8>)
 8000b40:	f000 fc0e 	bl	8001360 <HAL_GPIO_Init>

}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_MspInit+0x60>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_MspInit+0x60>)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd8:	d113      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_TIM_Base_MspInit+0x44>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <HAL_TIM_Base_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_TIM_Base_MspInit+0x44>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	201c      	movs	r0, #28
 8000bf8:	f000 fb7b 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bfc:	201c      	movs	r0, #28
 8000bfe:	f000 fb94 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 fa59 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <TIM2_IRQHandler+0x10>)
 8000c66:	f001 f9c1 	bl	8001fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000009c 	.word	0x2000009c

08000c74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0;
int timer1_counter = 0, timer2_counter = 0;

void setTimer1(int duration){
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <setTimer1+0x2c>)
 8000c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c90:	1092      	asrs	r2, r2, #2
 8000c92:	17db      	asrs	r3, r3, #31
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <setTimer1+0x30>)
 8000c98:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <setTimer1+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	66666667 	.word	0x66666667
 8000cb0:	20000088 	.word	0x20000088
 8000cb4:	20000080 	.word	0x20000080

08000cb8 <setTimer2>:

void setTimer2(int duration){
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <setTimer2+0x2c>)
 8000cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc8:	1092      	asrs	r2, r2, #2
 8000cca:	17db      	asrs	r3, r3, #31
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <setTimer2+0x30>)
 8000cd0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <setTimer2+0x34>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	66666667 	.word	0x66666667
 8000ce8:	2000008c 	.word	0x2000008c
 8000cec:	20000084 	.word	0x20000084

08000cf0 <timer_run>:

void timer_run(){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <timer_run+0x4c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dd0b      	ble.n	8000d14 <timer_run+0x24>
		timer1_counter--;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <timer_run+0x4c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <timer_run+0x4c>)
 8000d04:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <timer_run+0x4c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <timer_run+0x24>
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <timer_run+0x50>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <timer_run+0x54>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dd0b      	ble.n	8000d34 <timer_run+0x44>
		timer2_counter--;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <timer_run+0x54>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <timer_run+0x54>)
 8000d24:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <timer_run+0x54>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <timer_run+0x44>
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <timer_run+0x58>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
	}
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000088 	.word	0x20000088
 8000d40:	20000080 	.word	0x20000080
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	20000084 	.word	0x20000084

08000d4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	timer_run();
 8000d54:	f7ff ffcc 	bl	8000cf0 <timer_run>
	button_reading();
 8000d58:	f7ff f9f8 	bl	800014c <button_reading>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <set_traffic1_red>:
 *  Created on: Oct 12, 2022
 *      Author: phamv
 */
#include "traffic.h"

void set_traffic1_red(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <set_traffic1_red+0x2c>)
 8000d70:	f000 fc87 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <set_traffic1_red+0x2c>)
 8000d7c:	f000 fc81 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d86:	4802      	ldr	r0, [pc, #8]	; (8000d90 <set_traffic1_red+0x2c>)
 8000d88:	f000 fc7b 	bl	8001682 <HAL_GPIO_WritePin>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010800 	.word	0x40010800

08000d94 <set_traffic2_red>:

void set_traffic2_red(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <set_traffic2_red+0x2c>)
 8000da0:	f000 fc6f 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <set_traffic2_red+0x2c>)
 8000dac:	f000 fc69 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db6:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <set_traffic2_red+0x2c>)
 8000db8:	f000 fc63 	bl	8001682 <HAL_GPIO_WritePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010800 	.word	0x40010800

08000dc4 <set_traffic1_green>:

void set_traffic1_green(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dce:	4808      	ldr	r0, [pc, #32]	; (8000df0 <set_traffic1_green+0x2c>)
 8000dd0:	f000 fc57 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <set_traffic1_green+0x2c>)
 8000ddc:	f000 fc51 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de6:	4802      	ldr	r0, [pc, #8]	; (8000df0 <set_traffic1_green+0x2c>)
 8000de8:	f000 fc4b 	bl	8001682 <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40010800 	.word	0x40010800

08000df4 <set_traffic2_green>:

void set_traffic2_green(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	4808      	ldr	r0, [pc, #32]	; (8000e20 <set_traffic2_green+0x2c>)
 8000e00:	f000 fc3f 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <set_traffic2_green+0x2c>)
 8000e0c:	f000 fc39 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e16:	4802      	ldr	r0, [pc, #8]	; (8000e20 <set_traffic2_green+0x2c>)
 8000e18:	f000 fc33 	bl	8001682 <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40010800 	.word	0x40010800

08000e24 <set_traffic1_yellow>:

void set_traffic1_yellow(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2e:	4808      	ldr	r0, [pc, #32]	; (8000e50 <set_traffic1_yellow+0x2c>)
 8000e30:	f000 fc27 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <set_traffic1_yellow+0x2c>)
 8000e3c:	f000 fc21 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <set_traffic1_yellow+0x2c>)
 8000e48:	f000 fc1b 	bl	8001682 <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40010800 	.word	0x40010800

08000e54 <set_traffic2_yellow>:

void set_traffic2_yellow(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <set_traffic2_yellow+0x2c>)
 8000e60:	f000 fc0f 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <set_traffic2_yellow+0x2c>)
 8000e6c:	f000 fc09 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e76:	4802      	ldr	r0, [pc, #8]	; (8000e80 <set_traffic2_yellow+0x2c>)
 8000e78:	f000 fc03 	bl	8001682 <HAL_GPIO_WritePin>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010800 	.word	0x40010800

08000e84 <toggle_traffic_red>:

void toggle_traffic_red(){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <toggle_traffic_red+0x1c>)
 8000e8e:	f000 fc10 	bl	80016b2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <toggle_traffic_red+0x1c>)
 8000e98:	f000 fc0b 	bl	80016b2 <HAL_GPIO_TogglePin>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <toggle_traffic_green>:

void toggle_traffic_green(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <toggle_traffic_green+0x1c>)
 8000eae:	f000 fc00 	bl	80016b2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000eb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <toggle_traffic_green+0x1c>)
 8000eb8:	f000 fbfb 	bl	80016b2 <HAL_GPIO_TogglePin>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <toggle_traffic_yellow>:

void toggle_traffic_yellow(){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <toggle_traffic_yellow+0x1c>)
 8000ece:	f000 fbf0 	bl	80016b2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000ed2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed6:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <toggle_traffic_yellow+0x1c>)
 8000ed8:	f000 fbeb 	bl	80016b2 <HAL_GPIO_TogglePin>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <display_traffic_7SEG>:

void display_traffic_7SEG(int index, unsigned int num){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	if(index < 0 || index >= 2) return;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db21      	blt.n	8000f38 <display_traffic_7SEG+0x54>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	dc1e      	bgt.n	8000f38 <display_traffic_7SEG+0x54>
	if(num < 0 || num >= 100) return;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b63      	cmp	r3, #99	; 0x63
 8000efe:	d81d      	bhi.n	8000f3c <display_traffic_7SEG+0x58>
	display_7SEG(index*2, num/10);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	005a      	lsls	r2, r3, #1
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	490f      	ldr	r1, [pc, #60]	; (8000f44 <display_traffic_7SEG+0x60>)
 8000f08:	fba1 1303 	umull	r1, r3, r1, r3
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f000 f819 	bl	8000f48 <display_7SEG>
	display_7SEG(index*2 + 1, num%10);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	1c58      	adds	r0, r3, #1
 8000f1c:	6839      	ldr	r1, [r7, #0]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <display_traffic_7SEG+0x60>)
 8000f20:	fba3 2301 	umull	r2, r3, r3, r1
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	1aca      	subs	r2, r1, r3
 8000f30:	4611      	mov	r1, r2
 8000f32:	f000 f809 	bl	8000f48 <display_7SEG>
 8000f36:	e002      	b.n	8000f3e <display_traffic_7SEG+0x5a>
	if(index < 0 || index >= 2) return;
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <display_traffic_7SEG+0x5a>
	if(num < 0 || num >= 100) return;
 8000f3c:	bf00      	nop
}
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	cccccccd 	.word	0xcccccccd

08000f48 <display_7SEG>:

void display_7SEG(int index, unsigned int num){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	if(num < 0 || num >= 10) return;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b09      	cmp	r3, #9
 8000f56:	d865      	bhi.n	8001024 <display_7SEG+0xdc>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d864      	bhi.n	8001028 <display_7SEG+0xe0>
 8000f5e:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <display_7SEG+0x1c>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000f87 	.word	0x08000f87
 8000f6c:	08000f99 	.word	0x08000f99
 8000f70:	08000fb3 	.word	0x08000fb3
	uint16_t pinA, pinB, pinC, pinD;
	switch(index){
	case 0:
		pinA = DRIVER_7SEG_A0_Pin;
 8000f74:	2301      	movs	r3, #1
 8000f76:	81fb      	strh	r3, [r7, #14]
		pinB = DRIVER_7SEG_B0_Pin;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	81bb      	strh	r3, [r7, #12]
		pinC = DRIVER_7SEG_C0_Pin;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	817b      	strh	r3, [r7, #10]
		pinD = DRIVER_7SEG_D0_Pin;
 8000f80:	2308      	movs	r3, #8
 8000f82:	813b      	strh	r3, [r7, #8]
		break;
 8000f84:	e022      	b.n	8000fcc <display_7SEG+0x84>
	case 1:
		pinA = DRIVER_7SEG_A1_Pin;
 8000f86:	2310      	movs	r3, #16
 8000f88:	81fb      	strh	r3, [r7, #14]
		pinB = DRIVER_7SEG_B1_Pin;
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	81bb      	strh	r3, [r7, #12]
		pinC = DRIVER_7SEG_C1_Pin;
 8000f8e:	2340      	movs	r3, #64	; 0x40
 8000f90:	817b      	strh	r3, [r7, #10]
		pinD = DRIVER_7SEG_D1_Pin;
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	813b      	strh	r3, [r7, #8]
		break;
 8000f96:	e019      	b.n	8000fcc <display_7SEG+0x84>
	case 2:
		pinA = DRIVER_7SEG_A2_Pin;
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	81fb      	strh	r3, [r7, #14]
		pinB = DRIVER_7SEG_B2_Pin;
 8000f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa2:	81bb      	strh	r3, [r7, #12]
		pinC = DRIVER_7SEG_C2_Pin;
 8000fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa8:	817b      	strh	r3, [r7, #10]
		pinD = DRIVER_7SEG_D2_Pin;
 8000faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fae:	813b      	strh	r3, [r7, #8]
		break;
 8000fb0:	e00c      	b.n	8000fcc <display_7SEG+0x84>
	case 3:
		pinA = DRIVER_7SEG_A3_Pin;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb6:	81fb      	strh	r3, [r7, #14]
		pinB = DRIVER_7SEG_B3_Pin;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbc:	81bb      	strh	r3, [r7, #12]
		pinC = DRIVER_7SEG_C3_Pin;
 8000fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc2:	817b      	strh	r3, [r7, #10]
		pinD = DRIVER_7SEG_D3_Pin;
 8000fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc8:	813b      	strh	r3, [r7, #8]
		break;
 8000fca:	bf00      	nop
	default:
		return;
	}
	HAL_GPIO_WritePin(GPIOB, pinA, num & 0x01);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <display_7SEG+0xe8>)
 8000fdc:	f000 fb51 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, pinB, (num >> 1) & 0x01);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	085b      	lsrs	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	89bb      	ldrh	r3, [r7, #12]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480f      	ldr	r0, [pc, #60]	; (8001030 <display_7SEG+0xe8>)
 8000ff2:	f000 fb46 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, pinC, (num >> 2) & 0x01);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	897b      	ldrh	r3, [r7, #10]
 8001004:	4619      	mov	r1, r3
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <display_7SEG+0xe8>)
 8001008:	f000 fb3b 	bl	8001682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, pinD, (num >> 3) & 0x01);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	893b      	ldrh	r3, [r7, #8]
 800101a:	4619      	mov	r1, r3
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <display_7SEG+0xe8>)
 800101e:	f000 fb30 	bl	8001682 <HAL_GPIO_WritePin>
 8001022:	e002      	b.n	800102a <display_7SEG+0xe2>
	if(num < 0 || num >= 10) return;
 8001024:	bf00      	nop
 8001026:	e000      	b.n	800102a <display_7SEG+0xe2>
		return;
 8001028:	bf00      	nop
}
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40010c00 	.word	0x40010c00

08001034 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	; (800106c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	; (8001078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800105a:	f7ff fe0b 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f001 fb0d 	bl	800267c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff fc69 	bl	8000938 <main>
  bx lr
 8001066:	4770      	bx	lr
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001070:	08002714 	.word	0x08002714
  ldr r2, =_sbss
 8001074:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001078:	200000e8 	.word	0x200000e8

0800107c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC1_2_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x28>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f923 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fd62 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f93b 	bl	8001346 <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f903 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000018 	.word	0x20000018
 8001104:	20000020 	.word	0x20000020
 8001108:	2000001c 	.word	0x2000001c

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x1c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x20>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <HAL_IncTick+0x20>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000020 	.word	0x20000020
 800112c:	200000e4 	.word	0x200000e4

08001130 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b02      	ldr	r3, [pc, #8]	; (8001140 <HAL_GetTick+0x10>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	200000e4 	.word	0x200000e4

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4906      	ldr	r1, [pc, #24]	; (80011dc <__NVIC_EnableIRQ+0x34>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff90 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff2d 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff42 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff90 	bl	8001234 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5f 	bl	80011e0 <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff35 	bl	80011a8 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e148      	b.n	8001606 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001374:	2201      	movs	r2, #1
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8137 	bne.w	8001600 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4aa3      	ldr	r2, [pc, #652]	; (8001624 <HAL_GPIO_Init+0x2c4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d05e      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 800139c:	4aa1      	ldr	r2, [pc, #644]	; (8001624 <HAL_GPIO_Init+0x2c4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d875      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013a2:	4aa1      	ldr	r2, [pc, #644]	; (8001628 <HAL_GPIO_Init+0x2c8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d058      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013a8:	4a9f      	ldr	r2, [pc, #636]	; (8001628 <HAL_GPIO_Init+0x2c8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d86f      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ae:	4a9f      	ldr	r2, [pc, #636]	; (800162c <HAL_GPIO_Init+0x2cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d052      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013b4:	4a9d      	ldr	r2, [pc, #628]	; (800162c <HAL_GPIO_Init+0x2cc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d869      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ba:	4a9d      	ldr	r2, [pc, #628]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d04c      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013c0:	4a9b      	ldr	r2, [pc, #620]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d863      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013c6:	4a9b      	ldr	r2, [pc, #620]	; (8001634 <HAL_GPIO_Init+0x2d4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d046      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013cc:	4a99      	ldr	r2, [pc, #612]	; (8001634 <HAL_GPIO_Init+0x2d4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d85d      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d82a      	bhi.n	800142c <HAL_GPIO_Init+0xcc>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d859      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <HAL_GPIO_Init+0x80>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	08001435 	.word	0x08001435
 80013e8:	08001447 	.word	0x08001447
 80013ec:	08001489 	.word	0x08001489
 80013f0:	0800148f 	.word	0x0800148f
 80013f4:	0800148f 	.word	0x0800148f
 80013f8:	0800148f 	.word	0x0800148f
 80013fc:	0800148f 	.word	0x0800148f
 8001400:	0800148f 	.word	0x0800148f
 8001404:	0800148f 	.word	0x0800148f
 8001408:	0800148f 	.word	0x0800148f
 800140c:	0800148f 	.word	0x0800148f
 8001410:	0800148f 	.word	0x0800148f
 8001414:	0800148f 	.word	0x0800148f
 8001418:	0800148f 	.word	0x0800148f
 800141c:	0800148f 	.word	0x0800148f
 8001420:	0800148f 	.word	0x0800148f
 8001424:	0800143d 	.word	0x0800143d
 8001428:	08001451 	.word	0x08001451
 800142c:	4a82      	ldr	r2, [pc, #520]	; (8001638 <HAL_GPIO_Init+0x2d8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001432:	e02c      	b.n	800148e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e029      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e024      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	3308      	adds	r3, #8
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e01f      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	330c      	adds	r3, #12
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e01a      	b.n	8001490 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001462:	2304      	movs	r3, #4
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e013      	b.n	8001490 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	611a      	str	r2, [r3, #16]
          break;
 800147a:	e009      	b.n	8001490 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	615a      	str	r2, [r3, #20]
          break;
 8001486:	e003      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x130>
          break;
 800148e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d801      	bhi.n	800149a <HAL_GPIO_Init+0x13a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e001      	b.n	800149e <HAL_GPIO_Init+0x13e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d802      	bhi.n	80014ac <HAL_GPIO_Init+0x14c>
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	e002      	b.n	80014b2 <HAL_GPIO_Init+0x152>
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3b08      	subs	r3, #8
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	210f      	movs	r1, #15
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	6a39      	ldr	r1, [r7, #32]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8090 	beq.w	8001600 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e0:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_GPIO_Init+0x2dc>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a55      	ldr	r2, [pc, #340]	; (800163c <HAL_GPIO_Init+0x2dc>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_GPIO_Init+0x2dc>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f8:	4a51      	ldr	r2, [pc, #324]	; (8001640 <HAL_GPIO_Init+0x2e0>)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d00d      	beq.n	8001540 <HAL_GPIO_Init+0x1e0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d007      	beq.n	800153c <HAL_GPIO_Init+0x1dc>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a47      	ldr	r2, [pc, #284]	; (800164c <HAL_GPIO_Init+0x2ec>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d101      	bne.n	8001538 <HAL_GPIO_Init+0x1d8>
 8001534:	2302      	movs	r3, #2
 8001536:	e004      	b.n	8001542 <HAL_GPIO_Init+0x1e2>
 8001538:	2303      	movs	r3, #3
 800153a:	e002      	b.n	8001542 <HAL_GPIO_Init+0x1e2>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_GPIO_Init+0x1e2>
 8001540:	2300      	movs	r3, #0
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	f002 0203 	and.w	r2, r2, #3
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	4093      	lsls	r3, r2
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001552:	493b      	ldr	r1, [pc, #236]	; (8001640 <HAL_GPIO_Init+0x2e0>)
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3302      	adds	r3, #2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800156c:	4b38      	ldr	r3, [pc, #224]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4937      	ldr	r1, [pc, #220]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800157a:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	4933      	ldr	r1, [pc, #204]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 8001584:	4013      	ands	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001594:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	492d      	ldr	r1, [pc, #180]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4929      	ldr	r1, [pc, #164]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	4923      	ldr	r1, [pc, #140]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	491f      	ldr	r1, [pc, #124]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4919      	ldr	r1, [pc, #100]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60cb      	str	r3, [r1, #12]
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4915      	ldr	r1, [pc, #84]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3301      	adds	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f aeaf 	bne.w	8001374 <HAL_GPIO_Init+0x14>
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	; 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	10320000 	.word	0x10320000
 8001628:	10310000 	.word	0x10310000
 800162c:	10220000 	.word	0x10220000
 8001630:	10210000 	.word	0x10210000
 8001634:	10120000 	.word	0x10120000
 8001638:	10110000 	.word	0x10110000
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	40010800 	.word	0x40010800
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40011000 	.word	0x40011000
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	807b      	strh	r3, [r7, #2]
 800168e:	4613      	mov	r3, r2
 8001690:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001692:	787b      	ldrb	r3, [r7, #1]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800169e:	e003      	b.n	80016a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	041a      	lsls	r2, r3, #16
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	611a      	str	r2, [r3, #16]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c4:	887a      	ldrh	r2, [r7, #2]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	041a      	lsls	r2, r3, #16
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	400b      	ands	r3, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	611a      	str	r2, [r3, #16]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e26c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8087 	beq.w	8001812 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001704:	4b92      	ldr	r3, [pc, #584]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b04      	cmp	r3, #4
 800170e:	d00c      	beq.n	800172a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001710:	4b8f      	ldr	r3, [pc, #572]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d112      	bne.n	8001742 <HAL_RCC_OscConfig+0x5e>
 800171c:	4b8c      	ldr	r3, [pc, #560]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d10b      	bne.n	8001742 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172a:	4b89      	ldr	r3, [pc, #548]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d06c      	beq.n	8001810 <HAL_RCC_OscConfig+0x12c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d168      	bne.n	8001810 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e246      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x76>
 800174c:	4b80      	ldr	r3, [pc, #512]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a7f      	ldr	r2, [pc, #508]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e02e      	b.n	80017b8 <HAL_RCC_OscConfig+0xd4>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x98>
 8001762:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7a      	ldr	r2, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b78      	ldr	r3, [pc, #480]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a77      	ldr	r2, [pc, #476]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xd4>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0xbc>
 8001786:	4b72      	ldr	r3, [pc, #456]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a71      	ldr	r2, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6e      	ldr	r2, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xd4>
 80017a0:	4b6b      	ldr	r3, [pc, #428]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a6a      	ldr	r2, [pc, #424]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a67      	ldr	r2, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fcb6 	bl	8001130 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fcb2 	bl	8001130 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1fa      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xe4>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fca2 	bl	8001130 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fc9e 	bl	8001130 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1e6      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x10c>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d063      	beq.n	80018e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181e:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800182a:	4b49      	ldr	r3, [pc, #292]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b08      	cmp	r3, #8
 8001834:	d11c      	bne.n	8001870 <HAL_RCC_OscConfig+0x18c>
 8001836:	4b46      	ldr	r3, [pc, #280]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x176>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1ba      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4939      	ldr	r1, [pc, #228]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	e03a      	b.n	80018e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fc57 	bl	8001130 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fc53 	bl	8001130 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e19b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4927      	ldr	r1, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fc36 	bl	8001130 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff fc32 	bl	8001130 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e17a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d03a      	beq.n	8001968 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d019      	beq.n	800192e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_RCC_OscConfig+0x274>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff fc16 	bl	8001130 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fc12 	bl	8001130 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e15a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001926:	2001      	movs	r0, #1
 8001928:	f000 faa6 	bl	8001e78 <RCC_Delay>
 800192c:	e01c      	b.n	8001968 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_RCC_OscConfig+0x274>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff fbfc 	bl	8001130 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193a:	e00f      	b.n	800195c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fbf8 	bl	8001130 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d908      	bls.n	800195c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e140      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	42420000 	.word	0x42420000
 8001958:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	4b9e      	ldr	r3, [pc, #632]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e9      	bne.n	800193c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80a6 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b97      	ldr	r3, [pc, #604]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b94      	ldr	r3, [pc, #592]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a93      	ldr	r2, [pc, #588]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b91      	ldr	r3, [pc, #580]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b8e      	ldr	r3, [pc, #568]	; (8001bdc <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b8b      	ldr	r3, [pc, #556]	; (8001bdc <HAL_RCC_OscConfig+0x4f8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a8a      	ldr	r2, [pc, #552]	; (8001bdc <HAL_RCC_OscConfig+0x4f8>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fbb9 	bl	8001130 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fbb5 	bl	8001130 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0fd      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b81      	ldr	r3, [pc, #516]	; (8001bdc <HAL_RCC_OscConfig+0x4f8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x312>
 80019e8:	4b7b      	ldr	r3, [pc, #492]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a7a      	ldr	r2, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	e02d      	b.n	8001a52 <HAL_RCC_OscConfig+0x36e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x334>
 80019fe:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a75      	ldr	r2, [pc, #468]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a72      	ldr	r2, [pc, #456]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	e01c      	b.n	8001a52 <HAL_RCC_OscConfig+0x36e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x356>
 8001a20:	4b6d      	ldr	r3, [pc, #436]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a6c      	ldr	r2, [pc, #432]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6213      	str	r3, [r2, #32]
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x36e>
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a66      	ldr	r2, [pc, #408]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a63      	ldr	r2, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fb69 	bl	8001130 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fb65 	bl	8001130 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0ab      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <HAL_RCC_OscConfig+0x37e>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fb53 	bl	8001130 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fb4f 	bl	8001130 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e095      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8081 	beq.w	8001bce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001acc:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d061      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d146      	bne.n	8001b6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <HAL_RCC_OscConfig+0x4fc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb23 	bl	8001130 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fb1f 	bl	8001130 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e067      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d108      	bne.n	8001b28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	492d      	ldr	r1, [pc, #180]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a19      	ldr	r1, [r3, #32]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	4927      	ldr	r1, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x4fc>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff faf3 	bl	8001130 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff faef 	bl	8001130 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e037      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x46a>
 8001b6c:	e02f      	b.n	8001bce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_RCC_OscConfig+0x4fc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fadc 	bl	8001130 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff fad8 	bl	8001130 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e020      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x498>
 8001b9a:	e018      	b.n	8001bce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e013      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42420060 	.word	0x42420060

08001be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0d0      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4965      	ldr	r1, [pc, #404]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d040      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e073      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06b      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4936      	ldr	r1, [pc, #216]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff fa2c 	bl	8001130 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff fa28 	bl	8001130 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e053      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d210      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	4922      	ldr	r1, [pc, #136]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d72:	f000 f821 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	490a      	ldr	r1, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f98a 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	080026fc 	.word	0x080026fc
 8001db0:	20000018 	.word	0x20000018
 8001db4:	2000001c 	.word	0x2000001c

08001db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b490      	push	{r4, r7}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dc0:	1d3c      	adds	r4, r7, #4
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dc8:	f240 2301 	movw	r3, #513	; 0x201
 8001dcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x40>
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x46>
 8001df6:	e02d      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfa:	623b      	str	r3, [r7, #32]
      break;
 8001dfc:	e02d      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	0c9b      	lsrs	r3, r3, #18
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c5b      	lsrs	r3, r3, #17
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e36:	fb02 f203 	mul.w	r2, r2, r3
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	e004      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	623b      	str	r3, [r7, #32]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e56:	623b      	str	r3, [r7, #32]
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc90      	pop	{r4, r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	080026ec 	.word	0x080026ec
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	007a1200 	.word	0x007a1200
 8001e74:	003d0900 	.word	0x003d0900

08001e78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <RCC_Delay+0x34>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <RCC_Delay+0x38>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0a5b      	lsrs	r3, r3, #9
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e94:	bf00      	nop
  }
  while (Delay --);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	60fa      	str	r2, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f9      	bne.n	8001e94 <RCC_Delay+0x1c>
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000018 	.word	0x20000018
 8001eb0:	10624dd3 	.word	0x10624dd3

08001eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e041      	b.n	8001f4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fe74 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f000 fa6a 	bl	80023cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d001      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e035      	b.n	8001fd8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <HAL_TIM_Base_Start_IT+0x90>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d009      	beq.n	8001fa2 <HAL_TIM_Base_Start_IT+0x4e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f96:	d004      	beq.n	8001fa2 <HAL_TIM_Base_Start_IT+0x4e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <HAL_TIM_Base_Start_IT+0x94>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d111      	bne.n	8001fc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	d010      	beq.n	8001fd6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc4:	e007      	b.n	8001fd6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	40000400 	.word	0x40000400

08001fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b02      	cmp	r3, #2
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0202 	mvn.w	r2, #2
 8002018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f9b1 	bl	8002396 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f9a4 	bl	8002384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f9b3 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b04      	cmp	r3, #4
 8002054:	d122      	bne.n	800209c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d11b      	bne.n	800209c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0204 	mvn.w	r2, #4
 800206c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f987 	bl	8002396 <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f97a 	bl	8002384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f989 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0208 	mvn.w	r2, #8
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f95d 	bl	8002396 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f950 	bl	8002384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f95f 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b10      	cmp	r3, #16
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0210 	mvn.w	r2, #16
 8002114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2208      	movs	r2, #8
 800211a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f933 	bl	8002396 <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f926 	bl	8002384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f935 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10e      	bne.n	8002170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0201 	mvn.w	r2, #1
 8002168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fdee 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d10e      	bne.n	800219c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d107      	bne.n	800219c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fa67 	bl	800266a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b4:	2b40      	cmp	r3, #64	; 0x40
 80021b6:	d107      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8f9 	bl	80023ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0220 	mvn.w	r2, #32
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa32 	bl	8002658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_TIM_ConfigClockSource+0x18>
 8002210:	2302      	movs	r3, #2
 8002212:	e0b3      	b.n	800237c <HAL_TIM_ConfigClockSource+0x180>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800223a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224c:	d03e      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0xd0>
 800224e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002252:	f200 8087 	bhi.w	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225a:	f000 8085 	beq.w	8002368 <HAL_TIM_ConfigClockSource+0x16c>
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d87f      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002264:	2b70      	cmp	r3, #112	; 0x70
 8002266:	d01a      	beq.n	800229e <HAL_TIM_ConfigClockSource+0xa2>
 8002268:	2b70      	cmp	r3, #112	; 0x70
 800226a:	d87b      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 800226c:	2b60      	cmp	r3, #96	; 0x60
 800226e:	d050      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0x116>
 8002270:	2b60      	cmp	r3, #96	; 0x60
 8002272:	d877      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002274:	2b50      	cmp	r3, #80	; 0x50
 8002276:	d03c      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0xf6>
 8002278:	2b50      	cmp	r3, #80	; 0x50
 800227a:	d873      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	d058      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0x136>
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d86f      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002284:	2b30      	cmp	r3, #48	; 0x30
 8002286:	d064      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x156>
 8002288:	2b30      	cmp	r3, #48	; 0x30
 800228a:	d86b      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 800228c:	2b20      	cmp	r3, #32
 800228e:	d060      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x156>
 8002290:	2b20      	cmp	r3, #32
 8002292:	d867      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
 8002294:	2b00      	cmp	r3, #0
 8002296:	d05c      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x156>
 8002298:	2b10      	cmp	r3, #16
 800229a:	d05a      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800229c:	e062      	b.n	8002364 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f000 f95c 	bl	800256a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	609a      	str	r2, [r3, #8]
      break;
 80022ca:	e04e      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f000 f945 	bl	800256a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ee:	609a      	str	r2, [r3, #8]
      break;
 80022f0:	e03b      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	461a      	mov	r2, r3
 8002300:	f000 f8bc 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2150      	movs	r1, #80	; 0x50
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f913 	bl	8002536 <TIM_ITRx_SetConfig>
      break;
 8002310:	e02b      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	461a      	mov	r2, r3
 8002320:	f000 f8da 	bl	80024d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2160      	movs	r1, #96	; 0x60
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f903 	bl	8002536 <TIM_ITRx_SetConfig>
      break;
 8002330:	e01b      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	461a      	mov	r2, r3
 8002340:	f000 f89c 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2140      	movs	r1, #64	; 0x40
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f8f3 	bl	8002536 <TIM_ITRx_SetConfig>
      break;
 8002350:	e00b      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f000 f8ea 	bl	8002536 <TIM_ITRx_SetConfig>
        break;
 8002362:	e002      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002364:	bf00      	nop
 8002366:	e000      	b.n	800236a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002368:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a25      	ldr	r2, [pc, #148]	; (8002474 <TIM_Base_SetConfig+0xa8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <TIM_Base_SetConfig+0x28>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ea:	d003      	beq.n	80023f4 <TIM_Base_SetConfig+0x28>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <TIM_Base_SetConfig+0xac>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <TIM_Base_SetConfig+0xa8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <TIM_Base_SetConfig+0x52>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d003      	beq.n	800241e <TIM_Base_SetConfig+0x52>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a17      	ldr	r2, [pc, #92]	; (8002478 <TIM_Base_SetConfig+0xac>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d108      	bne.n	8002430 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <TIM_Base_SetConfig+0xa8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	615a      	str	r2, [r3, #20]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40000400 	.word	0x40000400

0800247c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f023 0201 	bic.w	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f023 030a 	bic.w	r3, r3, #10
 80024b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	621a      	str	r2, [r3, #32]
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f023 0210 	bic.w	r2, r3, #16
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002502:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	031b      	lsls	r3, r3, #12
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	621a      	str	r2, [r3, #32]
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	f043 0307 	orr.w	r3, r3, #7
 8002558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800256a:	b480      	push	{r7}
 800256c:	b087      	sub	sp, #28
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002584:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	021a      	lsls	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	431a      	orrs	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4313      	orrs	r3, r2
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	609a      	str	r2, [r3, #8]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025bc:	2302      	movs	r3, #2
 80025be:	e041      	b.n	8002644 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260c:	d004      	beq.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d10c      	bne.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	4313      	orrs	r3, r2
 8002628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40000400 	.word	0x40000400

08002658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <__libc_init_array>:
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	2600      	movs	r6, #0
 8002680:	4d0c      	ldr	r5, [pc, #48]	; (80026b4 <__libc_init_array+0x38>)
 8002682:	4c0d      	ldr	r4, [pc, #52]	; (80026b8 <__libc_init_array+0x3c>)
 8002684:	1b64      	subs	r4, r4, r5
 8002686:	10a4      	asrs	r4, r4, #2
 8002688:	42a6      	cmp	r6, r4
 800268a:	d109      	bne.n	80026a0 <__libc_init_array+0x24>
 800268c:	f000 f822 	bl	80026d4 <_init>
 8002690:	2600      	movs	r6, #0
 8002692:	4d0a      	ldr	r5, [pc, #40]	; (80026bc <__libc_init_array+0x40>)
 8002694:	4c0a      	ldr	r4, [pc, #40]	; (80026c0 <__libc_init_array+0x44>)
 8002696:	1b64      	subs	r4, r4, r5
 8002698:	10a4      	asrs	r4, r4, #2
 800269a:	42a6      	cmp	r6, r4
 800269c:	d105      	bne.n	80026aa <__libc_init_array+0x2e>
 800269e:	bd70      	pop	{r4, r5, r6, pc}
 80026a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a4:	4798      	blx	r3
 80026a6:	3601      	adds	r6, #1
 80026a8:	e7ee      	b.n	8002688 <__libc_init_array+0xc>
 80026aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ae:	4798      	blx	r3
 80026b0:	3601      	adds	r6, #1
 80026b2:	e7f2      	b.n	800269a <__libc_init_array+0x1e>
 80026b4:	0800270c 	.word	0x0800270c
 80026b8:	0800270c 	.word	0x0800270c
 80026bc:	0800270c 	.word	0x0800270c
 80026c0:	08002710 	.word	0x08002710

080026c4 <memset>:
 80026c4:	4603      	mov	r3, r0
 80026c6:	4402      	add	r2, r0
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d100      	bne.n	80026ce <memset+0xa>
 80026cc:	4770      	bx	lr
 80026ce:	f803 1b01 	strb.w	r1, [r3], #1
 80026d2:	e7f9      	b.n	80026c8 <memset+0x4>

080026d4 <_init>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr

080026e0 <_fini>:
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	bf00      	nop
 80026e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e6:	bc08      	pop	{r3}
 80026e8:	469e      	mov	lr, r3
 80026ea:	4770      	bx	lr
