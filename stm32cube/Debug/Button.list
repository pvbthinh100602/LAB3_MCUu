
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002648  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002754  08002754  00012754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002774  08002774  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002774  08002774  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002774  08002774  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800277c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000024  080027a0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080027a0  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009725  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b50  00000000  00000000  00029772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ea2  00000000  00000000  0002c648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be52  00000000  00000000  000434ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008248e  00000000  00000000  0004f33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d17ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000282c  00000000  00000000  000d1820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800273c 	.word	0x0800273c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800273c 	.word	0x0800273c

0800014c <button_reading>:
static int counter1_for_button_pressed[NO_OF_BUTTONS];
static int counter2_for_button_pressed[NO_OF_BUTTONS];

int button_flag[NO_OF_BUTTONS];

void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e094      	b.n	8000282 <button_reading+0x136>
		debounce_buffer3[i] = debounce_buffer2[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	494d      	ldr	r1, [pc, #308]	; (8000294 <button_reading+0x148>)
 800015e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000162:	494d      	ldr	r1, [pc, #308]	; (8000298 <button_reading+0x14c>)
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 8000168:	79fa      	ldrb	r2, [r7, #7]
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	494b      	ldr	r1, [pc, #300]	; (800029c <button_reading+0x150>)
 800016e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000172:	4948      	ldr	r1, [pc, #288]	; (8000294 <button_reading+0x148>)
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint16_t button_pin = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	80bb      	strh	r3, [r7, #4]
		switch(i){
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2b02      	cmp	r3, #2
 8000180:	d00c      	beq.n	800019c <button_reading+0x50>
 8000182:	2b02      	cmp	r3, #2
 8000184:	dc0d      	bgt.n	80001a2 <button_reading+0x56>
 8000186:	2b00      	cmp	r3, #0
 8000188:	d002      	beq.n	8000190 <button_reading+0x44>
 800018a:	2b01      	cmp	r3, #1
 800018c:	d003      	beq.n	8000196 <button_reading+0x4a>
			break;
		case 2:
			button_pin = BUTTON2_Pin;
			break;
		default:
			break;
 800018e:	e008      	b.n	80001a2 <button_reading+0x56>
			button_pin = BUTTON0_Pin;
 8000190:	2302      	movs	r3, #2
 8000192:	80bb      	strh	r3, [r7, #4]
			break;
 8000194:	e006      	b.n	80001a4 <button_reading+0x58>
			button_pin = BUTTON1_Pin;
 8000196:	2304      	movs	r3, #4
 8000198:	80bb      	strh	r3, [r7, #4]
			break;
 800019a:	e003      	b.n	80001a4 <button_reading+0x58>
			button_pin = BUTTON2_Pin;
 800019c:	2308      	movs	r3, #8
 800019e:	80bb      	strh	r3, [r7, #4]
			break;
 80001a0:	e000      	b.n	80001a4 <button_reading+0x58>
			break;
 80001a2:	bf00      	nop
		}
		debounce_buffer1[i] = HAL_GPIO_ReadPin(GPIOA, button_pin);
 80001a4:	88bb      	ldrh	r3, [r7, #4]
 80001a6:	4619      	mov	r1, r3
 80001a8:	483d      	ldr	r0, [pc, #244]	; (80002a0 <button_reading+0x154>)
 80001aa:	f001 fa87 	bl	80016bc <HAL_GPIO_ReadPin>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4611      	mov	r1, r2
 80001b6:	4a39      	ldr	r2, [pc, #228]	; (800029c <button_reading+0x150>)
 80001b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	4a36      	ldr	r2, [pc, #216]	; (8000298 <button_reading+0x14c>)
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4933      	ldr	r1, [pc, #204]	; (8000294 <button_reading+0x148>)
 80001c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d155      	bne.n	800027c <button_reading+0x130>
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	4a30      	ldr	r2, [pc, #192]	; (8000294 <button_reading+0x148>)
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4930      	ldr	r1, [pc, #192]	; (800029c <button_reading+0x150>)
 80001dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d14b      	bne.n	800027c <button_reading+0x130>
			button_buffer[i] = debounce_buffer3[i];
 80001e4:	79fa      	ldrb	r2, [r7, #7]
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	492b      	ldr	r1, [pc, #172]	; (8000298 <button_reading+0x14c>)
 80001ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001ee:	492d      	ldr	r1, [pc, #180]	; (80002a4 <button_reading+0x158>)
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(button_buffer[i] == PRESSED_STATE){
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4a2b      	ldr	r2, [pc, #172]	; (80002a4 <button_reading+0x158>)
 80001f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d133      	bne.n	8000268 <button_reading+0x11c>
				if(counter2_for_button_pressed[i]  == WAITING_TIME/TIMER_CYCLE){
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	4a29      	ldr	r2, [pc, #164]	; (80002a8 <button_reading+0x15c>)
 8000204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000208:	2b64      	cmp	r3, #100	; 0x64
 800020a:	d104      	bne.n	8000216 <button_reading+0xca>
					button_flag[i] = 1;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a27      	ldr	r2, [pc, #156]	; (80002ac <button_reading+0x160>)
 8000210:	2101      	movs	r1, #1
 8000212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counter2_for_button_pressed[i] > 0){
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <button_reading+0x15c>)
 800021a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021e:	2b00      	cmp	r3, #0
 8000220:	dd08      	ble.n	8000234 <button_reading+0xe8>
					counter2_for_button_pressed[i]--;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <button_reading+0x15c>)
 8000226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022a:	3a01      	subs	r2, #1
 800022c:	491e      	ldr	r1, [pc, #120]	; (80002a8 <button_reading+0x15c>)
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000232:	e023      	b.n	800027c <button_reading+0x130>
				} else if(counter1_for_button_pressed[i] > 0){
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <button_reading+0x164>)
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	2b00      	cmp	r3, #0
 800023e:	dd08      	ble.n	8000252 <button_reading+0x106>
					counter1_for_button_pressed[i]--;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a1b      	ldr	r2, [pc, #108]	; (80002b0 <button_reading+0x164>)
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	3a01      	subs	r2, #1
 800024a:	4919      	ldr	r1, [pc, #100]	; (80002b0 <button_reading+0x164>)
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000250:	e014      	b.n	800027c <button_reading+0x130>
				} else{
					counter1_for_button_pressed[i] = TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE;
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <button_reading+0x164>)
 8000256:	2114      	movs	r1, #20
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[i] = 1;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	4a13      	ldr	r2, [pc, #76]	; (80002ac <button_reading+0x160>)
 8000260:	2101      	movs	r1, #1
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000266:	e009      	b.n	800027c <button_reading+0x130>
				}
			} else {
				counter1_for_button_pressed[i] = 0;
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <button_reading+0x164>)
 800026c:	2100      	movs	r1, #0
 800026e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counter2_for_button_pressed[i] = WAITING_TIME/TIMER_CYCLE;
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <button_reading+0x15c>)
 8000276:	2164      	movs	r1, #100	; 0x64
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	3301      	adds	r3, #1
 8000280:	71fb      	strb	r3, [r7, #7]
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2b02      	cmp	r3, #2
 8000286:	f67f af67 	bls.w	8000158 <button_reading+0xc>
			}
		}
	}
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000058 	.word	0x20000058
 8000298:	20000064 	.word	0x20000064
 800029c:	2000004c 	.word	0x2000004c
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000040 	.word	0x20000040
 80002a8:	2000007c 	.word	0x2000007c
 80002ac:	2000009c 	.word	0x2000009c
 80002b0:	20000070 	.word	0x20000070

080002b4 <fsm_automatic_run>:
 *  Created on: Oct 12, 2022
 *      Author: phamv
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	switch (status) {
 80002b8:	4b89      	ldr	r3, [pc, #548]	; (80004e0 <fsm_automatic_run+0x22c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3b01      	subs	r3, #1
 80002be:	2b04      	cmp	r3, #4
 80002c0:	f200 81f9 	bhi.w	80006b6 <fsm_automatic_run+0x402>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <fsm_automatic_run+0x18>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002e1 	.word	0x080002e1
 80002d0:	08000337 	.word	0x08000337
 80002d4:	08000403 	.word	0x08000403
 80002d8:	08000509 	.word	0x08000509
 80002dc:	080005dd 	.word	0x080005dd
		case INIT:
			//switch to AUTO_RED1
			status = AUTO_RED1;
 80002e0:	4b7f      	ldr	r3, [pc, #508]	; (80004e0 <fsm_automatic_run+0x22c>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	601a      	str	r2, [r3, #0]
			setTimer1(config_green*1000);
 80002e6:	4b7f      	ldr	r3, [pc, #508]	; (80004e4 <fsm_automatic_run+0x230>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002ee:	fb02 f303 	mul.w	r3, r2, r3
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fcf8 	bl	8000ce8 <setTimer1>
			setTimer2(1000);
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f000 fd10 	bl	8000d20 <setTimer2>
			counter_red = config_red;
 8000300:	4b79      	ldr	r3, [pc, #484]	; (80004e8 <fsm_automatic_run+0x234>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a79      	ldr	r2, [pc, #484]	; (80004ec <fsm_automatic_run+0x238>)
 8000306:	6013      	str	r3, [r2, #0]
			counter_green = config_green;
 8000308:	4b76      	ldr	r3, [pc, #472]	; (80004e4 <fsm_automatic_run+0x230>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a78      	ldr	r2, [pc, #480]	; (80004f0 <fsm_automatic_run+0x23c>)
 800030e:	6013      	str	r3, [r2, #0]
			display_traffic_7SEG(0, counter_red--);
 8000310:	4b76      	ldr	r3, [pc, #472]	; (80004ec <fsm_automatic_run+0x238>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	1e5a      	subs	r2, r3, #1
 8000316:	4975      	ldr	r1, [pc, #468]	; (80004ec <fsm_automatic_run+0x238>)
 8000318:	600a      	str	r2, [r1, #0]
 800031a:	4619      	mov	r1, r3
 800031c:	2000      	movs	r0, #0
 800031e:	f000 fe15 	bl	8000f4c <display_traffic_7SEG>
			display_traffic_7SEG(1, counter_green--);
 8000322:	4b73      	ldr	r3, [pc, #460]	; (80004f0 <fsm_automatic_run+0x23c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	1e5a      	subs	r2, r3, #1
 8000328:	4971      	ldr	r1, [pc, #452]	; (80004f0 <fsm_automatic_run+0x23c>)
 800032a:	600a      	str	r2, [r1, #0]
 800032c:	4619      	mov	r1, r3
 800032e:	2001      	movs	r0, #1
 8000330:	f000 fe0c 	bl	8000f4c <display_traffic_7SEG>
			break;
 8000334:	e1c8      	b.n	80006c8 <fsm_automatic_run+0x414>
		case AUTO_RED1:
			//TODO
			set_traffic1_red();
 8000336:	f000 fd49 	bl	8000dcc <set_traffic1_red>
			set_traffic2_green();
 800033a:	f000 fd8f 	bl	8000e5c <set_traffic2_green>

			if(timer1_flag == 1){
 800033e:	4b6d      	ldr	r3, [pc, #436]	; (80004f4 <fsm_automatic_run+0x240>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d125      	bne.n	8000392 <fsm_automatic_run+0xde>
				// time out, switch to AUTO_RED2
				status = AUTO_RED2;
 8000346:	4b66      	ldr	r3, [pc, #408]	; (80004e0 <fsm_automatic_run+0x22c>)
 8000348:	2203      	movs	r2, #3
 800034a:	601a      	str	r2, [r3, #0]
				setTimer1(config_yellow*1000);
 800034c:	4b6a      	ldr	r3, [pc, #424]	; (80004f8 <fsm_automatic_run+0x244>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000354:	fb02 f303 	mul.w	r3, r2, r3
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fcc5 	bl	8000ce8 <setTimer1>
				counter_yellow = config_yellow;
 800035e:	4b66      	ldr	r3, [pc, #408]	; (80004f8 <fsm_automatic_run+0x244>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a66      	ldr	r2, [pc, #408]	; (80004fc <fsm_automatic_run+0x248>)
 8000364:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_red--);
 8000366:	4b61      	ldr	r3, [pc, #388]	; (80004ec <fsm_automatic_run+0x238>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	495f      	ldr	r1, [pc, #380]	; (80004ec <fsm_automatic_run+0x238>)
 800036e:	600a      	str	r2, [r1, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	2000      	movs	r0, #0
 8000374:	f000 fdea 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_yellow--);
 8000378:	4b60      	ldr	r3, [pc, #384]	; (80004fc <fsm_automatic_run+0x248>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	1e5a      	subs	r2, r3, #1
 800037e:	495f      	ldr	r1, [pc, #380]	; (80004fc <fsm_automatic_run+0x248>)
 8000380:	600a      	str	r2, [r1, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	2001      	movs	r0, #1
 8000386:	f000 fde1 	bl	8000f4c <display_traffic_7SEG>
				setTimer2(1000);
 800038a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038e:	f000 fcc7 	bl	8000d20 <setTimer2>
			}

			if(timer2_flag == 1){
 8000392:	4b5b      	ldr	r3, [pc, #364]	; (8000500 <fsm_automatic_run+0x24c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d115      	bne.n	80003c6 <fsm_automatic_run+0x112>
				//display and decrease led 7seg counter
				display_traffic_7SEG(0, counter_red--);
 800039a:	4b54      	ldr	r3, [pc, #336]	; (80004ec <fsm_automatic_run+0x238>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	1e5a      	subs	r2, r3, #1
 80003a0:	4952      	ldr	r1, [pc, #328]	; (80004ec <fsm_automatic_run+0x238>)
 80003a2:	600a      	str	r2, [r1, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fdd0 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_green--);
 80003ac:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <fsm_automatic_run+0x23c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	1e5a      	subs	r2, r3, #1
 80003b2:	494f      	ldr	r1, [pc, #316]	; (80004f0 <fsm_automatic_run+0x23c>)
 80003b4:	600a      	str	r2, [r1, #0]
 80003b6:	4619      	mov	r1, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fdc7 	bl	8000f4c <display_traffic_7SEG>
				setTimer2(1000);
 80003be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c2:	f000 fcad 	bl	8000d20 <setTimer2>
			}

			if(button_flag[0] == 1){
 80003c6:	4b4f      	ldr	r3, [pc, #316]	; (8000504 <fsm_automatic_run+0x250>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	f040 8175 	bne.w	80006ba <fsm_automatic_run+0x406>
				//button1 pressed, switch to MAN_RED
				button_flag[0] = 0;
 80003d0:	4b4c      	ldr	r3, [pc, #304]	; (8000504 <fsm_automatic_run+0x250>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 80003d6:	4b42      	ldr	r3, [pc, #264]	; (80004e0 <fsm_automatic_run+0x22c>)
 80003d8:	220b      	movs	r2, #11
 80003da:	601a      	str	r2, [r3, #0]
				// set up for blinky led
				set_traffic1_red();
 80003dc:	f000 fcf6 	bl	8000dcc <set_traffic1_red>
				set_traffic2_red();
 80003e0:	f000 fd0c 	bl	8000dfc <set_traffic2_red>
				setTimer1(BLINKY_TIME);
 80003e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e8:	f000 fc7e 	bl	8000ce8 <setTimer1>
				//set up for display 7seg
				display_traffic_7SEG(0, 1);
 80003ec:	2101      	movs	r1, #1
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 fdac 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, config_red);
 80003f4:	4b3c      	ldr	r3, [pc, #240]	; (80004e8 <fsm_automatic_run+0x234>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4619      	mov	r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 fda6 	bl	8000f4c <display_traffic_7SEG>
			}
			break;
 8000400:	e15b      	b.n	80006ba <fsm_automatic_run+0x406>
		case AUTO_RED2:
			//TODO
			set_traffic1_red();
 8000402:	f000 fce3 	bl	8000dcc <set_traffic1_red>
			set_traffic2_yellow();
 8000406:	f000 fd59 	bl	8000ebc <set_traffic2_yellow>

			if(timer1_flag == 1){
 800040a:	4b3a      	ldr	r3, [pc, #232]	; (80004f4 <fsm_automatic_run+0x240>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d129      	bne.n	8000466 <fsm_automatic_run+0x1b2>
				// time out, switch to AUTO_GREEN
				status = AUTO_GREEN;
 8000412:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <fsm_automatic_run+0x22c>)
 8000414:	2204      	movs	r2, #4
 8000416:	601a      	str	r2, [r3, #0]
				setTimer1(config_green*1000);
 8000418:	4b32      	ldr	r3, [pc, #200]	; (80004e4 <fsm_automatic_run+0x230>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000420:	fb02 f303 	mul.w	r3, r2, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f000 fc5f 	bl	8000ce8 <setTimer1>
				counter_red = config_red;
 800042a:	4b2f      	ldr	r3, [pc, #188]	; (80004e8 <fsm_automatic_run+0x234>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a2f      	ldr	r2, [pc, #188]	; (80004ec <fsm_automatic_run+0x238>)
 8000430:	6013      	str	r3, [r2, #0]
				counter_green = config_green;
 8000432:	4b2c      	ldr	r3, [pc, #176]	; (80004e4 <fsm_automatic_run+0x230>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a2e      	ldr	r2, [pc, #184]	; (80004f0 <fsm_automatic_run+0x23c>)
 8000438:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_green--);
 800043a:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <fsm_automatic_run+0x23c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	492b      	ldr	r1, [pc, #172]	; (80004f0 <fsm_automatic_run+0x23c>)
 8000442:	600a      	str	r2, [r1, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	2000      	movs	r0, #0
 8000448:	f000 fd80 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red--);
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <fsm_automatic_run+0x238>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	1e5a      	subs	r2, r3, #1
 8000452:	4926      	ldr	r1, [pc, #152]	; (80004ec <fsm_automatic_run+0x238>)
 8000454:	600a      	str	r2, [r1, #0]
 8000456:	4619      	mov	r1, r3
 8000458:	2001      	movs	r0, #1
 800045a:	f000 fd77 	bl	8000f4c <display_traffic_7SEG>
				setTimer2(1000);
 800045e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000462:	f000 fc5d 	bl	8000d20 <setTimer2>
			}

			if(timer2_flag ==1){
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <fsm_automatic_run+0x24c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d115      	bne.n	800049a <fsm_automatic_run+0x1e6>
				//display and decrease led 7seg counter
				display_traffic_7SEG(0, counter_red--);
 800046e:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <fsm_automatic_run+0x238>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	491d      	ldr	r1, [pc, #116]	; (80004ec <fsm_automatic_run+0x238>)
 8000476:	600a      	str	r2, [r1, #0]
 8000478:	4619      	mov	r1, r3
 800047a:	2000      	movs	r0, #0
 800047c:	f000 fd66 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_yellow--);
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <fsm_automatic_run+0x248>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	491d      	ldr	r1, [pc, #116]	; (80004fc <fsm_automatic_run+0x248>)
 8000488:	600a      	str	r2, [r1, #0]
 800048a:	4619      	mov	r1, r3
 800048c:	2001      	movs	r0, #1
 800048e:	f000 fd5d 	bl	8000f4c <display_traffic_7SEG>
				setTimer2(1000);
 8000492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000496:	f000 fc43 	bl	8000d20 <setTimer2>
			}

			if(button_flag[0] == 1){
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <fsm_automatic_run+0x250>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	f040 810d 	bne.w	80006be <fsm_automatic_run+0x40a>
				//button1 pressed, switch to MAN_RED
				button_flag[0] = 0;
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <fsm_automatic_run+0x250>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <fsm_automatic_run+0x22c>)
 80004ac:	220b      	movs	r2, #11
 80004ae:	601a      	str	r2, [r3, #0]
				set_traffic1_red();
 80004b0:	f000 fc8c 	bl	8000dcc <set_traffic1_red>
				set_traffic2_red();
 80004b4:	f000 fca2 	bl	8000dfc <set_traffic2_red>
				// set up for blinky led
				setTimer1(BLINKY_TIME);
 80004b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004bc:	f000 fc14 	bl	8000ce8 <setTimer1>
				//set up for display 7seg
				counter_red = config_red;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <fsm_automatic_run+0x234>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a09      	ldr	r2, [pc, #36]	; (80004ec <fsm_automatic_run+0x238>)
 80004c6:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 1);
 80004c8:	2101      	movs	r1, #1
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 fd3e 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red);
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <fsm_automatic_run+0x238>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 fd38 	bl	8000f4c <display_traffic_7SEG>
			}
			break;
 80004dc:	e0ef      	b.n	80006be <fsm_automatic_run+0x40a>
 80004de:	bf00      	nop
 80004e0:	20000088 	.word	0x20000088
 80004e4:	20000004 	.word	0x20000004
 80004e8:	20000000 	.word	0x20000000
 80004ec:	2000000c 	.word	0x2000000c
 80004f0:	20000010 	.word	0x20000010
 80004f4:	2000008c 	.word	0x2000008c
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000014 	.word	0x20000014
 8000500:	20000090 	.word	0x20000090
 8000504:	2000009c 	.word	0x2000009c
		case AUTO_GREEN:
			//TODO
			set_traffic1_green();
 8000508:	f000 fc90 	bl	8000e2c <set_traffic1_green>
			set_traffic2_red();
 800050c:	f000 fc76 	bl	8000dfc <set_traffic2_red>

			if(timer1_flag == 1){
 8000510:	4b6e      	ldr	r3, [pc, #440]	; (80006cc <fsm_automatic_run+0x418>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d125      	bne.n	8000564 <fsm_automatic_run+0x2b0>
				// time out, switch to AUTO_YELLOW
				status = AUTO_YELLOW;
 8000518:	4b6d      	ldr	r3, [pc, #436]	; (80006d0 <fsm_automatic_run+0x41c>)
 800051a:	2205      	movs	r2, #5
 800051c:	601a      	str	r2, [r3, #0]
				setTimer1(config_yellow*1000);
 800051e:	4b6d      	ldr	r3, [pc, #436]	; (80006d4 <fsm_automatic_run+0x420>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fbdc 	bl	8000ce8 <setTimer1>
				counter_yellow = config_yellow;
 8000530:	4b68      	ldr	r3, [pc, #416]	; (80006d4 <fsm_automatic_run+0x420>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a68      	ldr	r2, [pc, #416]	; (80006d8 <fsm_automatic_run+0x424>)
 8000536:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_yellow--);
 8000538:	4b67      	ldr	r3, [pc, #412]	; (80006d8 <fsm_automatic_run+0x424>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	1e5a      	subs	r2, r3, #1
 800053e:	4966      	ldr	r1, [pc, #408]	; (80006d8 <fsm_automatic_run+0x424>)
 8000540:	600a      	str	r2, [r1, #0]
 8000542:	4619      	mov	r1, r3
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fd01 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red--);
 800054a:	4b64      	ldr	r3, [pc, #400]	; (80006dc <fsm_automatic_run+0x428>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	1e5a      	subs	r2, r3, #1
 8000550:	4962      	ldr	r1, [pc, #392]	; (80006dc <fsm_automatic_run+0x428>)
 8000552:	600a      	str	r2, [r1, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fcf8 	bl	8000f4c <display_traffic_7SEG>
				setTimer2(1000);
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f000 fbde 	bl	8000d20 <setTimer2>
			}

			if(timer2_flag ==1){
 8000564:	4b5e      	ldr	r3, [pc, #376]	; (80006e0 <fsm_automatic_run+0x42c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d115      	bne.n	8000598 <fsm_automatic_run+0x2e4>
				//display and decrease led 7seg counter
				display_traffic_7SEG(0, counter_green--);
 800056c:	4b5d      	ldr	r3, [pc, #372]	; (80006e4 <fsm_automatic_run+0x430>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	1e5a      	subs	r2, r3, #1
 8000572:	495c      	ldr	r1, [pc, #368]	; (80006e4 <fsm_automatic_run+0x430>)
 8000574:	600a      	str	r2, [r1, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fce7 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red--);
 800057e:	4b57      	ldr	r3, [pc, #348]	; (80006dc <fsm_automatic_run+0x428>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	1e5a      	subs	r2, r3, #1
 8000584:	4955      	ldr	r1, [pc, #340]	; (80006dc <fsm_automatic_run+0x428>)
 8000586:	600a      	str	r2, [r1, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fcde 	bl	8000f4c <display_traffic_7SEG>
				setTimer2(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f000 fbc4 	bl	8000d20 <setTimer2>
			}

			if(button_flag[0] == 1){
 8000598:	4b53      	ldr	r3, [pc, #332]	; (80006e8 <fsm_automatic_run+0x434>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	f040 8090 	bne.w	80006c2 <fsm_automatic_run+0x40e>
				//button1 pressed, switch to MAN_RED
				button_flag[0] = 0;
 80005a2:	4b51      	ldr	r3, [pc, #324]	; (80006e8 <fsm_automatic_run+0x434>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 80005a8:	4b49      	ldr	r3, [pc, #292]	; (80006d0 <fsm_automatic_run+0x41c>)
 80005aa:	220b      	movs	r2, #11
 80005ac:	601a      	str	r2, [r3, #0]
				// set up for blinky led
				set_traffic1_red();
 80005ae:	f000 fc0d 	bl	8000dcc <set_traffic1_red>
				set_traffic2_red();
 80005b2:	f000 fc23 	bl	8000dfc <set_traffic2_red>
				setTimer1(BLINKY_TIME);
 80005b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ba:	f000 fb95 	bl	8000ce8 <setTimer1>
				//set up for display 7seg
				counter_red = config_red;
 80005be:	4b4b      	ldr	r3, [pc, #300]	; (80006ec <fsm_automatic_run+0x438>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a46      	ldr	r2, [pc, #280]	; (80006dc <fsm_automatic_run+0x428>)
 80005c4:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 1);
 80005c6:	2101      	movs	r1, #1
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fcbf 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red);
 80005ce:	4b43      	ldr	r3, [pc, #268]	; (80006dc <fsm_automatic_run+0x428>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 fcb9 	bl	8000f4c <display_traffic_7SEG>
			}
			break;
 80005da:	e072      	b.n	80006c2 <fsm_automatic_run+0x40e>
		case AUTO_YELLOW:
			//TODO
			set_traffic1_yellow();
 80005dc:	f000 fc56 	bl	8000e8c <set_traffic1_yellow>
			set_traffic2_red();
 80005e0:	f000 fc0c 	bl	8000dfc <set_traffic2_red>

			if(timer1_flag == 1){
 80005e4:	4b39      	ldr	r3, [pc, #228]	; (80006cc <fsm_automatic_run+0x418>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d129      	bne.n	8000640 <fsm_automatic_run+0x38c>
				// time out, switch to AUTO_RED1
				status = AUTO_RED1;
 80005ec:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <fsm_automatic_run+0x41c>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	601a      	str	r2, [r3, #0]
				setTimer1(config_green*1000);
 80005f2:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <fsm_automatic_run+0x43c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fb72 	bl	8000ce8 <setTimer1>
				counter_red = config_red;
 8000604:	4b39      	ldr	r3, [pc, #228]	; (80006ec <fsm_automatic_run+0x438>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a34      	ldr	r2, [pc, #208]	; (80006dc <fsm_automatic_run+0x428>)
 800060a:	6013      	str	r3, [r2, #0]
				counter_green = config_green;
 800060c:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <fsm_automatic_run+0x43c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <fsm_automatic_run+0x430>)
 8000612:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_red--);
 8000614:	4b31      	ldr	r3, [pc, #196]	; (80006dc <fsm_automatic_run+0x428>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1e5a      	subs	r2, r3, #1
 800061a:	4930      	ldr	r1, [pc, #192]	; (80006dc <fsm_automatic_run+0x428>)
 800061c:	600a      	str	r2, [r1, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fc93 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_green--);
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <fsm_automatic_run+0x430>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1e5a      	subs	r2, r3, #1
 800062c:	492d      	ldr	r1, [pc, #180]	; (80006e4 <fsm_automatic_run+0x430>)
 800062e:	600a      	str	r2, [r1, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	2001      	movs	r0, #1
 8000634:	f000 fc8a 	bl	8000f4c <display_traffic_7SEG>
				setTimer2(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063c:	f000 fb70 	bl	8000d20 <setTimer2>
			}

			if(timer2_flag ==1){
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <fsm_automatic_run+0x42c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d115      	bne.n	8000674 <fsm_automatic_run+0x3c0>
				//display and decrease led 7seg counter
				display_traffic_7SEG(0, counter_yellow--);
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <fsm_automatic_run+0x424>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1e5a      	subs	r2, r3, #1
 800064e:	4922      	ldr	r1, [pc, #136]	; (80006d8 <fsm_automatic_run+0x424>)
 8000650:	600a      	str	r2, [r1, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fc79 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red--);
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <fsm_automatic_run+0x428>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	491e      	ldr	r1, [pc, #120]	; (80006dc <fsm_automatic_run+0x428>)
 8000662:	600a      	str	r2, [r1, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	2001      	movs	r0, #1
 8000668:	f000 fc70 	bl	8000f4c <display_traffic_7SEG>
				setTimer2(1000);
 800066c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000670:	f000 fb56 	bl	8000d20 <setTimer2>
			}

			if(button_flag[0] == 1){
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <fsm_automatic_run+0x434>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d124      	bne.n	80006c6 <fsm_automatic_run+0x412>
				//button1 pressed, switch to MAN_RED
				button_flag[0] = 0;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <fsm_automatic_run+0x434>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <fsm_automatic_run+0x41c>)
 8000684:	220b      	movs	r2, #11
 8000686:	601a      	str	r2, [r3, #0]
				// set up for blinky led
				set_traffic1_red();
 8000688:	f000 fba0 	bl	8000dcc <set_traffic1_red>
				set_traffic2_red();
 800068c:	f000 fbb6 	bl	8000dfc <set_traffic2_red>
				setTimer1(BLINKY_TIME);
 8000690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000694:	f000 fb28 	bl	8000ce8 <setTimer1>
				//set up for display 7seg
				counter_red = config_red;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <fsm_automatic_run+0x438>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <fsm_automatic_run+0x428>)
 800069e:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 1);
 80006a0:	2101      	movs	r1, #1
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 fc52 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_red);
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <fsm_automatic_run+0x428>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 fc4c 	bl	8000f4c <display_traffic_7SEG>
			}
			break;
 80006b4:	e007      	b.n	80006c6 <fsm_automatic_run+0x412>
		default:
			break;
 80006b6:	bf00      	nop
 80006b8:	e006      	b.n	80006c8 <fsm_automatic_run+0x414>
			break;
 80006ba:	bf00      	nop
 80006bc:	e004      	b.n	80006c8 <fsm_automatic_run+0x414>
			break;
 80006be:	bf00      	nop
 80006c0:	e002      	b.n	80006c8 <fsm_automatic_run+0x414>
			break;
 80006c2:	bf00      	nop
 80006c4:	e000      	b.n	80006c8 <fsm_automatic_run+0x414>
			break;
 80006c6:	bf00      	nop
	}
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000008c 	.word	0x2000008c
 80006d0:	20000088 	.word	0x20000088
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000014 	.word	0x20000014
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	20000090 	.word	0x20000090
 80006e4:	20000010 	.word	0x20000010
 80006e8:	2000009c 	.word	0x2000009c
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000004 	.word	0x20000004

080006f4 <fsm_manual_run>:
 *      Author: phamv
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	switch (status) {
 80006f8:	4ba0      	ldr	r3, [pc, #640]	; (800097c <fsm_manual_run+0x288>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b0d      	cmp	r3, #13
 80006fe:	f000 80cc 	beq.w	800089a <fsm_manual_run+0x1a6>
 8000702:	2b0d      	cmp	r3, #13
 8000704:	f300 8130 	bgt.w	8000968 <fsm_manual_run+0x274>
 8000708:	2b0b      	cmp	r3, #11
 800070a:	d002      	beq.n	8000712 <fsm_manual_run+0x1e>
 800070c:	2b0c      	cmp	r3, #12
 800070e:	d062      	beq.n	80007d6 <fsm_manual_run+0xe2>
				display_traffic_7SEG(0, counter_red--);
				display_traffic_7SEG(1, counter_green--);
			}
			break;
		default:
			break;
 8000710:	e12a      	b.n	8000968 <fsm_manual_run+0x274>
			if(timer1_flag == 1){
 8000712:	4b9b      	ldr	r3, [pc, #620]	; (8000980 <fsm_manual_run+0x28c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d105      	bne.n	8000726 <fsm_manual_run+0x32>
				toggle_traffic_red();
 800071a:	f000 fbe7 	bl	8000eec <toggle_traffic_red>
				setTimer1(BLINKY_TIME);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f000 fae1 	bl	8000ce8 <setTimer1>
			if(button_flag[1] == 1){
 8000726:	4b97      	ldr	r3, [pc, #604]	; (8000984 <fsm_manual_run+0x290>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d114      	bne.n	8000758 <fsm_manual_run+0x64>
				button_flag[1] = 0;
 800072e:	4b95      	ldr	r3, [pc, #596]	; (8000984 <fsm_manual_run+0x290>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
				counter_red++;
 8000734:	4b94      	ldr	r3, [pc, #592]	; (8000988 <fsm_manual_run+0x294>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a93      	ldr	r2, [pc, #588]	; (8000988 <fsm_manual_run+0x294>)
 800073c:	6013      	str	r3, [r2, #0]
				if(counter_red > 99) counter_red = 2;
 800073e:	4b92      	ldr	r3, [pc, #584]	; (8000988 <fsm_manual_run+0x294>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b63      	cmp	r3, #99	; 0x63
 8000744:	dd02      	ble.n	800074c <fsm_manual_run+0x58>
 8000746:	4b90      	ldr	r3, [pc, #576]	; (8000988 <fsm_manual_run+0x294>)
 8000748:	2202      	movs	r2, #2
 800074a:	601a      	str	r2, [r3, #0]
				display_traffic_7SEG(1, counter_red);
 800074c:	4b8e      	ldr	r3, [pc, #568]	; (8000988 <fsm_manual_run+0x294>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fbfa 	bl	8000f4c <display_traffic_7SEG>
			if(button_flag[2] == 1){
 8000758:	4b8a      	ldr	r3, [pc, #552]	; (8000984 <fsm_manual_run+0x290>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d118      	bne.n	8000792 <fsm_manual_run+0x9e>
				button_flag[2] = 0;
 8000760:	4b88      	ldr	r3, [pc, #544]	; (8000984 <fsm_manual_run+0x290>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
				config_red = counter_red;
 8000766:	4b88      	ldr	r3, [pc, #544]	; (8000988 <fsm_manual_run+0x294>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a88      	ldr	r2, [pc, #544]	; (800098c <fsm_manual_run+0x298>)
 800076c:	6013      	str	r3, [r2, #0]
				if(config_red <= config_green){
 800076e:	4b87      	ldr	r3, [pc, #540]	; (800098c <fsm_manual_run+0x298>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b87      	ldr	r3, [pc, #540]	; (8000990 <fsm_manual_run+0x29c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	dc04      	bgt.n	8000784 <fsm_manual_run+0x90>
					config_green = config_red - 1;
 800077a:	4b84      	ldr	r3, [pc, #528]	; (800098c <fsm_manual_run+0x298>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	4a83      	ldr	r2, [pc, #524]	; (8000990 <fsm_manual_run+0x29c>)
 8000782:	6013      	str	r3, [r2, #0]
				config_yellow = config_red - config_green;
 8000784:	4b81      	ldr	r3, [pc, #516]	; (800098c <fsm_manual_run+0x298>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b81      	ldr	r3, [pc, #516]	; (8000990 <fsm_manual_run+0x29c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	4a81      	ldr	r2, [pc, #516]	; (8000994 <fsm_manual_run+0x2a0>)
 8000790:	6013      	str	r3, [r2, #0]
			if(button_flag[0] == 1){
 8000792:	4b7c      	ldr	r3, [pc, #496]	; (8000984 <fsm_manual_run+0x290>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	f040 80e8 	bne.w	800096c <fsm_manual_run+0x278>
				status = MAN_GREEN;
 800079c:	4b77      	ldr	r3, [pc, #476]	; (800097c <fsm_manual_run+0x288>)
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
				button_flag[0] = 0;
 80007a2:	4b78      	ldr	r3, [pc, #480]	; (8000984 <fsm_manual_run+0x290>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
				set_traffic1_green();
 80007a8:	f000 fb40 	bl	8000e2c <set_traffic1_green>
				set_traffic2_green();
 80007ac:	f000 fb56 	bl	8000e5c <set_traffic2_green>
				setTimer1(BLINKY_TIME);
 80007b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b4:	f000 fa98 	bl	8000ce8 <setTimer1>
				counter_green = config_green;
 80007b8:	4b75      	ldr	r3, [pc, #468]	; (8000990 <fsm_manual_run+0x29c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a76      	ldr	r2, [pc, #472]	; (8000998 <fsm_manual_run+0x2a4>)
 80007be:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 2);
 80007c0:	2102      	movs	r1, #2
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fbc2 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_green);
 80007c8:	4b73      	ldr	r3, [pc, #460]	; (8000998 <fsm_manual_run+0x2a4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 fbbc 	bl	8000f4c <display_traffic_7SEG>
			break;
 80007d4:	e0ca      	b.n	800096c <fsm_manual_run+0x278>
			if(timer1_flag == 1){
 80007d6:	4b6a      	ldr	r3, [pc, #424]	; (8000980 <fsm_manual_run+0x28c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d105      	bne.n	80007ea <fsm_manual_run+0xf6>
				toggle_traffic_green();
 80007de:	f000 fb95 	bl	8000f0c <toggle_traffic_green>
				setTimer1(BLINKY_TIME);
 80007e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e6:	f000 fa7f 	bl	8000ce8 <setTimer1>
			if(button_flag[1] == 1){
 80007ea:	4b66      	ldr	r3, [pc, #408]	; (8000984 <fsm_manual_run+0x290>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d114      	bne.n	800081c <fsm_manual_run+0x128>
				button_flag[1] = 0;
 80007f2:	4b64      	ldr	r3, [pc, #400]	; (8000984 <fsm_manual_run+0x290>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
				counter_green++;
 80007f8:	4b67      	ldr	r3, [pc, #412]	; (8000998 <fsm_manual_run+0x2a4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a66      	ldr	r2, [pc, #408]	; (8000998 <fsm_manual_run+0x2a4>)
 8000800:	6013      	str	r3, [r2, #0]
				if(counter_green > 99) counter_green = 1;
 8000802:	4b65      	ldr	r3, [pc, #404]	; (8000998 <fsm_manual_run+0x2a4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b63      	cmp	r3, #99	; 0x63
 8000808:	dd02      	ble.n	8000810 <fsm_manual_run+0x11c>
 800080a:	4b63      	ldr	r3, [pc, #396]	; (8000998 <fsm_manual_run+0x2a4>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
				display_traffic_7SEG(1, counter_green);
 8000810:	4b61      	ldr	r3, [pc, #388]	; (8000998 <fsm_manual_run+0x2a4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	2001      	movs	r0, #1
 8000818:	f000 fb98 	bl	8000f4c <display_traffic_7SEG>
			if(button_flag[2] == 1){
 800081c:	4b59      	ldr	r3, [pc, #356]	; (8000984 <fsm_manual_run+0x290>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d118      	bne.n	8000856 <fsm_manual_run+0x162>
				button_flag[2] = 0;
 8000824:	4b57      	ldr	r3, [pc, #348]	; (8000984 <fsm_manual_run+0x290>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
				config_green = counter_green;
 800082a:	4b5b      	ldr	r3, [pc, #364]	; (8000998 <fsm_manual_run+0x2a4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a58      	ldr	r2, [pc, #352]	; (8000990 <fsm_manual_run+0x29c>)
 8000830:	6013      	str	r3, [r2, #0]
				if(config_red <= config_green){
 8000832:	4b56      	ldr	r3, [pc, #344]	; (800098c <fsm_manual_run+0x298>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b56      	ldr	r3, [pc, #344]	; (8000990 <fsm_manual_run+0x29c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	429a      	cmp	r2, r3
 800083c:	dc04      	bgt.n	8000848 <fsm_manual_run+0x154>
					config_red = config_green + 1;
 800083e:	4b54      	ldr	r3, [pc, #336]	; (8000990 <fsm_manual_run+0x29c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	4a51      	ldr	r2, [pc, #324]	; (800098c <fsm_manual_run+0x298>)
 8000846:	6013      	str	r3, [r2, #0]
				config_yellow = config_red - config_green;
 8000848:	4b50      	ldr	r3, [pc, #320]	; (800098c <fsm_manual_run+0x298>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b50      	ldr	r3, [pc, #320]	; (8000990 <fsm_manual_run+0x29c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	4a50      	ldr	r2, [pc, #320]	; (8000994 <fsm_manual_run+0x2a0>)
 8000854:	6013      	str	r3, [r2, #0]
			if(button_flag[0] == 1){
 8000856:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <fsm_manual_run+0x290>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	f040 8088 	bne.w	8000970 <fsm_manual_run+0x27c>
				status = MAN_YELLOW;
 8000860:	4b46      	ldr	r3, [pc, #280]	; (800097c <fsm_manual_run+0x288>)
 8000862:	220d      	movs	r2, #13
 8000864:	601a      	str	r2, [r3, #0]
				button_flag[0] = 0;
 8000866:	4b47      	ldr	r3, [pc, #284]	; (8000984 <fsm_manual_run+0x290>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
				set_traffic1_yellow();
 800086c:	f000 fb0e 	bl	8000e8c <set_traffic1_yellow>
				set_traffic2_yellow();
 8000870:	f000 fb24 	bl	8000ebc <set_traffic2_yellow>
				setTimer1(BLINKY_TIME);
 8000874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000878:	f000 fa36 	bl	8000ce8 <setTimer1>
				counter_yellow = config_yellow;
 800087c:	4b45      	ldr	r3, [pc, #276]	; (8000994 <fsm_manual_run+0x2a0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a46      	ldr	r2, [pc, #280]	; (800099c <fsm_manual_run+0x2a8>)
 8000882:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, 3);
 8000884:	2103      	movs	r1, #3
 8000886:	2000      	movs	r0, #0
 8000888:	f000 fb60 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_yellow);
 800088c:	4b43      	ldr	r3, [pc, #268]	; (800099c <fsm_manual_run+0x2a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	2001      	movs	r0, #1
 8000894:	f000 fb5a 	bl	8000f4c <display_traffic_7SEG>
			break;
 8000898:	e06a      	b.n	8000970 <fsm_manual_run+0x27c>
			if(timer1_flag == 1){
 800089a:	4b39      	ldr	r3, [pc, #228]	; (8000980 <fsm_manual_run+0x28c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d105      	bne.n	80008ae <fsm_manual_run+0x1ba>
				toggle_traffic_yellow();
 80008a2:	f000 fb43 	bl	8000f2c <toggle_traffic_yellow>
				setTimer1(BLINKY_TIME);
 80008a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008aa:	f000 fa1d 	bl	8000ce8 <setTimer1>
			if(button_flag[1] == 1){
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <fsm_manual_run+0x290>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d114      	bne.n	80008e0 <fsm_manual_run+0x1ec>
				button_flag[1] = 0;
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <fsm_manual_run+0x290>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
				counter_yellow++;
 80008bc:	4b37      	ldr	r3, [pc, #220]	; (800099c <fsm_manual_run+0x2a8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a36      	ldr	r2, [pc, #216]	; (800099c <fsm_manual_run+0x2a8>)
 80008c4:	6013      	str	r3, [r2, #0]
				if(counter_yellow > 99) counter_yellow = 1;
 80008c6:	4b35      	ldr	r3, [pc, #212]	; (800099c <fsm_manual_run+0x2a8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b63      	cmp	r3, #99	; 0x63
 80008cc:	dd02      	ble.n	80008d4 <fsm_manual_run+0x1e0>
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <fsm_manual_run+0x2a8>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
				display_traffic_7SEG(1, counter_yellow);
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <fsm_manual_run+0x2a8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fb36 	bl	8000f4c <display_traffic_7SEG>
			if(button_flag[2] == 1){
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <fsm_manual_run+0x290>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d10d      	bne.n	8000904 <fsm_manual_run+0x210>
				button_flag[2] = 0;
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <fsm_manual_run+0x290>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
				config_yellow = counter_yellow;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <fsm_manual_run+0x2a8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a28      	ldr	r2, [pc, #160]	; (8000994 <fsm_manual_run+0x2a0>)
 80008f4:	6013      	str	r3, [r2, #0]
				config_red = config_yellow + config_green;
 80008f6:	4b27      	ldr	r3, [pc, #156]	; (8000994 <fsm_manual_run+0x2a0>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <fsm_manual_run+0x29c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <fsm_manual_run+0x298>)
 8000902:	6013      	str	r3, [r2, #0]
			if(button_flag[0] == 1){
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <fsm_manual_run+0x290>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d133      	bne.n	8000974 <fsm_manual_run+0x280>
				status = AUTO_RED1;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <fsm_manual_run+0x288>)
 800090e:	2202      	movs	r2, #2
 8000910:	601a      	str	r2, [r3, #0]
				button_flag[0] = 0;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <fsm_manual_run+0x290>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
				setTimer1(config_green*1000);
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <fsm_manual_run+0x29c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f9df 	bl	8000ce8 <setTimer1>
				setTimer2(1000);
 800092a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092e:	f000 f9f7 	bl	8000d20 <setTimer2>
				counter_red = config_red;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <fsm_manual_run+0x298>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <fsm_manual_run+0x294>)
 8000938:	6013      	str	r3, [r2, #0]
				counter_green = config_green;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <fsm_manual_run+0x29c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a16      	ldr	r2, [pc, #88]	; (8000998 <fsm_manual_run+0x2a4>)
 8000940:	6013      	str	r3, [r2, #0]
				display_traffic_7SEG(0, counter_red--);
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <fsm_manual_run+0x294>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <fsm_manual_run+0x294>)
 800094a:	600a      	str	r2, [r1, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	2000      	movs	r0, #0
 8000950:	f000 fafc 	bl	8000f4c <display_traffic_7SEG>
				display_traffic_7SEG(1, counter_green--);
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <fsm_manual_run+0x2a4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	490f      	ldr	r1, [pc, #60]	; (8000998 <fsm_manual_run+0x2a4>)
 800095c:	600a      	str	r2, [r1, #0]
 800095e:	4619      	mov	r1, r3
 8000960:	2001      	movs	r0, #1
 8000962:	f000 faf3 	bl	8000f4c <display_traffic_7SEG>
			break;
 8000966:	e005      	b.n	8000974 <fsm_manual_run+0x280>
			break;
 8000968:	bf00      	nop
 800096a:	e004      	b.n	8000976 <fsm_manual_run+0x282>
			break;
 800096c:	bf00      	nop
 800096e:	e002      	b.n	8000976 <fsm_manual_run+0x282>
			break;
 8000970:	bf00      	nop
 8000972:	e000      	b.n	8000976 <fsm_manual_run+0x282>
			break;
 8000974:	bf00      	nop
	}
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000088 	.word	0x20000088
 8000980:	2000008c 	.word	0x2000008c
 8000984:	2000009c 	.word	0x2000009c
 8000988:	2000000c 	.word	0x2000000c
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004
 8000994:	20000008 	.word	0x20000008
 8000998:	20000010 	.word	0x20000010
 800099c:	20000014 	.word	0x20000014

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a4:	f000 fba0 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a8:	f000 f814 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ac:	f000 f89a 	bl	8000ae4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009b0:	f000 f84c 	bl	8000a4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <main+0x2c>)
 80009b6:	f001 fb01 	bl	8001fbc <HAL_TIM_Base_Start_IT>
  status = INIT;
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <main+0x30>)
 80009bc:	2201      	movs	r2, #1
 80009be:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic_run();
 80009c0:	f7ff fc78 	bl	80002b4 <fsm_automatic_run>
	  fsm_manual_run();
 80009c4:	f7ff fe96 	bl	80006f4 <fsm_manual_run>
	  fsm_automatic_run();
 80009c8:	e7fa      	b.n	80009c0 <main+0x20>
 80009ca:	bf00      	nop
 80009cc:	200000a8 	.word	0x200000a8
 80009d0:	20000088 	.word	0x20000088

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b090      	sub	sp, #64	; 0x40
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0318 	add.w	r3, r7, #24
 80009de:	2228      	movs	r2, #40	; 0x28
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fea2 	bl	800272c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fa:	2301      	movs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fe:	2310      	movs	r3, #16
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fe9e 	bl	800174c <HAL_RCC_OscConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a16:	f000 f8d3 	bl	8000bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 f90a 	bl	8001c4c <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f8bf 	bl	8000bc0 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3740      	adds	r7, #64	; 0x40
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000a72:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a90:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000a92:	f001 fa43 	bl	8001f1c <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a9c:	f000 f890 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000aae:	f001 fbd9 	bl	8002264 <HAL_TIM_ConfigClockSource>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ab8:	f000 f882 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_TIM2_Init+0x94>)
 8000aca:	f001 fda1 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 f874 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200000a8 	.word	0x200000a8

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_GPIO_Init+0xd0>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0xd0>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0xd0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_GPIO_Init+0xd0>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <MX_GPIO_Init+0xd0>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_GPIO_Init+0xd0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CHECK_Pin|LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f64f 4120 	movw	r1, #64544	; 0xfc20
 8000b2e:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <MX_GPIO_Init+0xd4>)
 8000b30:	f000 fddb 	bl	80016ea <HAL_GPIO_WritePin>
                          |LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRIVER_7SEG_A0_Pin|DRIVER_7SEG_B0_Pin|DRIVER_7SEG_C0_Pin|DRIVER_7SEG_C2_Pin
 8000b34:	2200      	movs	r2, #0
 8000b36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b3a:	4820      	ldr	r0, [pc, #128]	; (8000bbc <MX_GPIO_Init+0xd8>)
 8000b3c:	f000 fdd5 	bl	80016ea <HAL_GPIO_WritePin>
                          |DRIVER_7SEG_D2_Pin|DRIVER_7SEG_A3_Pin|DRIVER_7SEG_B3_Pin|DRIVER_7SEG_C3_Pin
                          |DRIVER_7SEG_D3_Pin|DRIVER_7SEG_D0_Pin|DRIVER_7SEG_A1_Pin|DRIVER_7SEG_B1_Pin
                          |DRIVER_7SEG_C1_Pin|DRIVER_7SEG_D1_Pin|DRIVER_7SEG_A2_Pin|DRIVER_7SEG_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 8000b40:	2302      	movs	r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	4619      	mov	r1, r3
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <MX_GPIO_Init+0xd4>)
 8000b54:	f000 fc38 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <MX_GPIO_Init+0xd4>)
 8000b6c:	f000 fc2c 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CHECK_Pin LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin
                           LED_RED2_Pin LED_GREEN2_Pin LED_YELLOW2_Pin */
  GPIO_InitStruct.Pin = LED_CHECK_Pin|LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin
 8000b70:	f64f 4320 	movw	r3, #64544	; 0xfc20
 8000b74:	60bb      	str	r3, [r7, #8]
                          |LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4619      	mov	r1, r3
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <MX_GPIO_Init+0xd4>)
 8000b8a:	f000 fc1d 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRIVER_7SEG_A0_Pin DRIVER_7SEG_B0_Pin DRIVER_7SEG_C0_Pin DRIVER_7SEG_C2_Pin
                           DRIVER_7SEG_D2_Pin DRIVER_7SEG_A3_Pin DRIVER_7SEG_B3_Pin DRIVER_7SEG_C3_Pin
                           DRIVER_7SEG_D3_Pin DRIVER_7SEG_D0_Pin DRIVER_7SEG_A1_Pin DRIVER_7SEG_B1_Pin
                           DRIVER_7SEG_C1_Pin DRIVER_7SEG_D1_Pin DRIVER_7SEG_A2_Pin DRIVER_7SEG_B2_Pin */
  GPIO_InitStruct.Pin = DRIVER_7SEG_A0_Pin|DRIVER_7SEG_B0_Pin|DRIVER_7SEG_C0_Pin|DRIVER_7SEG_C2_Pin
 8000b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b92:	60bb      	str	r3, [r7, #8]
                          |DRIVER_7SEG_D2_Pin|DRIVER_7SEG_A3_Pin|DRIVER_7SEG_B3_Pin|DRIVER_7SEG_C3_Pin
                          |DRIVER_7SEG_D3_Pin|DRIVER_7SEG_D0_Pin|DRIVER_7SEG_A1_Pin|DRIVER_7SEG_B1_Pin
                          |DRIVER_7SEG_C1_Pin|DRIVER_7SEG_D1_Pin|DRIVER_7SEG_A2_Pin|DRIVER_7SEG_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_GPIO_Init+0xd8>)
 8000ba8:	f000 fc0e 	bl	80013c8 <HAL_GPIO_Init>

}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_MspInit+0x60>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_MspInit+0x60>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d113      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	201c      	movs	r0, #28
 8000c60:	f000 fb7b 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c64:	201c      	movs	r0, #28
 8000c66:	f000 fb94 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbe:	f000 fa59 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM2_IRQHandler+0x10>)
 8000cce:	f001 f9c1 	bl	8002054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000a8 	.word	0x200000a8

08000cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0;
int timer1_counter = 0, timer2_counter = 0;

void setTimer1(int duration){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <setTimer1+0x2c>)
 8000cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf8:	1092      	asrs	r2, r2, #2
 8000cfa:	17db      	asrs	r3, r3, #31
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <setTimer1+0x30>)
 8000d00:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <setTimer1+0x34>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	66666667 	.word	0x66666667
 8000d18:	20000094 	.word	0x20000094
 8000d1c:	2000008c 	.word	0x2000008c

08000d20 <setTimer2>:

void setTimer2(int duration){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <setTimer2+0x2c>)
 8000d2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d30:	1092      	asrs	r2, r2, #2
 8000d32:	17db      	asrs	r3, r3, #31
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <setTimer2+0x30>)
 8000d38:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <setTimer2+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	66666667 	.word	0x66666667
 8000d50:	20000098 	.word	0x20000098
 8000d54:	20000090 	.word	0x20000090

08000d58 <timer_run>:

void timer_run(){
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <timer_run+0x4c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	dd0b      	ble.n	8000d7c <timer_run+0x24>
		timer1_counter--;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <timer_run+0x4c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <timer_run+0x4c>)
 8000d6c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <timer_run+0x4c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <timer_run+0x24>
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <timer_run+0x50>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <timer_run+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dd0b      	ble.n	8000d9c <timer_run+0x44>
		timer2_counter--;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <timer_run+0x54>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <timer_run+0x54>)
 8000d8c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <timer_run+0x54>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <timer_run+0x44>
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <timer_run+0x58>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000094 	.word	0x20000094
 8000da8:	2000008c 	.word	0x2000008c
 8000dac:	20000098 	.word	0x20000098
 8000db0:	20000090 	.word	0x20000090

08000db4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	timer_run();
 8000dbc:	f7ff ffcc 	bl	8000d58 <timer_run>
	button_reading();
 8000dc0:	f7ff f9c4 	bl	800014c <button_reading>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <set_traffic1_red>:
 *  Created on: Oct 12, 2022
 *      Author: phamv
 */
#include "traffic.h"

void set_traffic1_red(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <set_traffic1_red+0x2c>)
 8000dd8:	f000 fc87 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <set_traffic1_red+0x2c>)
 8000de4:	f000 fc81 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dee:	4802      	ldr	r0, [pc, #8]	; (8000df8 <set_traffic1_red+0x2c>)
 8000df0:	f000 fc7b 	bl	80016ea <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010800 	.word	0x40010800

08000dfc <set_traffic2_red>:

void set_traffic2_red(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <set_traffic2_red+0x2c>)
 8000e08:	f000 fc6f 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <set_traffic2_red+0x2c>)
 8000e14:	f000 fc69 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1e:	4802      	ldr	r0, [pc, #8]	; (8000e28 <set_traffic2_red+0x2c>)
 8000e20:	f000 fc63 	bl	80016ea <HAL_GPIO_WritePin>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40010800 	.word	0x40010800

08000e2c <set_traffic1_green>:

void set_traffic1_green(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e36:	4808      	ldr	r0, [pc, #32]	; (8000e58 <set_traffic1_green+0x2c>)
 8000e38:	f000 fc57 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <set_traffic1_green+0x2c>)
 8000e44:	f000 fc51 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4e:	4802      	ldr	r0, [pc, #8]	; (8000e58 <set_traffic1_green+0x2c>)
 8000e50:	f000 fc4b 	bl	80016ea <HAL_GPIO_WritePin>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010800 	.word	0x40010800

08000e5c <set_traffic2_green>:

void set_traffic2_green(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <set_traffic2_green+0x2c>)
 8000e68:	f000 fc3f 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <set_traffic2_green+0x2c>)
 8000e74:	f000 fc39 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7e:	4802      	ldr	r0, [pc, #8]	; (8000e88 <set_traffic2_green+0x2c>)
 8000e80:	f000 fc33 	bl	80016ea <HAL_GPIO_WritePin>
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010800 	.word	0x40010800

08000e8c <set_traffic1_yellow>:

void set_traffic1_yellow(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <set_traffic1_yellow+0x2c>)
 8000e98:	f000 fc27 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <set_traffic1_yellow+0x2c>)
 8000ea4:	f000 fc21 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eae:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <set_traffic1_yellow+0x2c>)
 8000eb0:	f000 fc1b 	bl	80016ea <HAL_GPIO_WritePin>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40010800 	.word	0x40010800

08000ebc <set_traffic2_yellow>:

void set_traffic2_yellow(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <set_traffic2_yellow+0x2c>)
 8000ec8:	f000 fc0f 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <set_traffic2_yellow+0x2c>)
 8000ed4:	f000 fc09 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ede:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <set_traffic2_yellow+0x2c>)
 8000ee0:	f000 fc03 	bl	80016ea <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010800 	.word	0x40010800

08000eec <toggle_traffic_red>:

void toggle_traffic_red(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <toggle_traffic_red+0x1c>)
 8000ef6:	f000 fc10 	bl	800171a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efe:	4802      	ldr	r0, [pc, #8]	; (8000f08 <toggle_traffic_red+0x1c>)
 8000f00:	f000 fc0b 	bl	800171a <HAL_GPIO_TogglePin>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010800 	.word	0x40010800

08000f0c <toggle_traffic_green>:

void toggle_traffic_green(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <toggle_traffic_green+0x1c>)
 8000f16:	f000 fc00 	bl	800171a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1e:	4802      	ldr	r0, [pc, #8]	; (8000f28 <toggle_traffic_green+0x1c>)
 8000f20:	f000 fbfb 	bl	800171a <HAL_GPIO_TogglePin>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40010800 	.word	0x40010800

08000f2c <toggle_traffic_yellow>:

void toggle_traffic_yellow(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <toggle_traffic_yellow+0x1c>)
 8000f36:	f000 fbf0 	bl	800171a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3e:	4802      	ldr	r0, [pc, #8]	; (8000f48 <toggle_traffic_yellow+0x1c>)
 8000f40:	f000 fbeb 	bl	800171a <HAL_GPIO_TogglePin>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010800 	.word	0x40010800

08000f4c <display_traffic_7SEG>:

void display_traffic_7SEG(int index, unsigned int num){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	if(index < 0 || index >= 2) return;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db21      	blt.n	8000fa0 <display_traffic_7SEG+0x54>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	dc1e      	bgt.n	8000fa0 <display_traffic_7SEG+0x54>
	if(num < 0 || num >= 100) return;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2b63      	cmp	r3, #99	; 0x63
 8000f66:	d81d      	bhi.n	8000fa4 <display_traffic_7SEG+0x58>
	display_7SEG(index*2, num/10);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	005a      	lsls	r2, r3, #1
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	490f      	ldr	r1, [pc, #60]	; (8000fac <display_traffic_7SEG+0x60>)
 8000f70:	fba1 1303 	umull	r1, r3, r1, r3
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	4619      	mov	r1, r3
 8000f78:	4610      	mov	r0, r2
 8000f7a:	f000 f819 	bl	8000fb0 <display_7SEG>
	display_7SEG(index*2 + 1, num%10);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	1c58      	adds	r0, r3, #1
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <display_traffic_7SEG+0x60>)
 8000f88:	fba3 2301 	umull	r2, r3, r3, r1
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	1aca      	subs	r2, r1, r3
 8000f98:	4611      	mov	r1, r2
 8000f9a:	f000 f809 	bl	8000fb0 <display_7SEG>
 8000f9e:	e002      	b.n	8000fa6 <display_traffic_7SEG+0x5a>
	if(index < 0 || index >= 2) return;
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <display_traffic_7SEG+0x5a>
	if(num < 0 || num >= 100) return;
 8000fa4:	bf00      	nop
}
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	cccccccd 	.word	0xcccccccd

08000fb0 <display_7SEG>:

void display_7SEG(int index, unsigned int num){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	if(num < 0 || num >= 10) return;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d865      	bhi.n	800108c <display_7SEG+0xdc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d864      	bhi.n	8001090 <display_7SEG+0xe0>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <display_7SEG+0x1c>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	08000fef 	.word	0x08000fef
 8000fd4:	08001001 	.word	0x08001001
 8000fd8:	0800101b 	.word	0x0800101b
	uint16_t pinA, pinB, pinC, pinD;
	switch(index){
	case 0:
		pinA = DRIVER_7SEG_A0_Pin;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	81fb      	strh	r3, [r7, #14]
		pinB = DRIVER_7SEG_B0_Pin;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	81bb      	strh	r3, [r7, #12]
		pinC = DRIVER_7SEG_C0_Pin;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	817b      	strh	r3, [r7, #10]
		pinD = DRIVER_7SEG_D0_Pin;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	813b      	strh	r3, [r7, #8]
		break;
 8000fec:	e022      	b.n	8001034 <display_7SEG+0x84>
	case 1:
		pinA = DRIVER_7SEG_A1_Pin;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	81fb      	strh	r3, [r7, #14]
		pinB = DRIVER_7SEG_B1_Pin;
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	81bb      	strh	r3, [r7, #12]
		pinC = DRIVER_7SEG_C1_Pin;
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	817b      	strh	r3, [r7, #10]
		pinD = DRIVER_7SEG_D1_Pin;
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	813b      	strh	r3, [r7, #8]
		break;
 8000ffe:	e019      	b.n	8001034 <display_7SEG+0x84>
	case 2:
		pinA = DRIVER_7SEG_A2_Pin;
 8001000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001004:	81fb      	strh	r3, [r7, #14]
		pinB = DRIVER_7SEG_B2_Pin;
 8001006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100a:	81bb      	strh	r3, [r7, #12]
		pinC = DRIVER_7SEG_C2_Pin;
 800100c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001010:	817b      	strh	r3, [r7, #10]
		pinD = DRIVER_7SEG_D2_Pin;
 8001012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001016:	813b      	strh	r3, [r7, #8]
		break;
 8001018:	e00c      	b.n	8001034 <display_7SEG+0x84>
	case 3:
		pinA = DRIVER_7SEG_A3_Pin;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	81fb      	strh	r3, [r7, #14]
		pinB = DRIVER_7SEG_B3_Pin;
 8001020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001024:	81bb      	strh	r3, [r7, #12]
		pinC = DRIVER_7SEG_C3_Pin;
 8001026:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800102a:	817b      	strh	r3, [r7, #10]
		pinD = DRIVER_7SEG_D3_Pin;
 800102c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001030:	813b      	strh	r3, [r7, #8]
		break;
 8001032:	bf00      	nop
	default:
		return;
	}
	HAL_GPIO_WritePin(GPIOB, pinA, num & 0x01);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	4619      	mov	r1, r3
 8001042:	4815      	ldr	r0, [pc, #84]	; (8001098 <display_7SEG+0xe8>)
 8001044:	f000 fb51 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, pinB, (num >> 1) & 0x01);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	89bb      	ldrh	r3, [r7, #12]
 8001056:	4619      	mov	r1, r3
 8001058:	480f      	ldr	r0, [pc, #60]	; (8001098 <display_7SEG+0xe8>)
 800105a:	f000 fb46 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, pinC, (num >> 2) & 0x01);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	897b      	ldrh	r3, [r7, #10]
 800106c:	4619      	mov	r1, r3
 800106e:	480a      	ldr	r0, [pc, #40]	; (8001098 <display_7SEG+0xe8>)
 8001070:	f000 fb3b 	bl	80016ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, pinD, (num >> 3) & 0x01);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	08db      	lsrs	r3, r3, #3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	893b      	ldrh	r3, [r7, #8]
 8001082:	4619      	mov	r1, r3
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <display_7SEG+0xe8>)
 8001086:	f000 fb30 	bl	80016ea <HAL_GPIO_WritePin>
 800108a:	e002      	b.n	8001092 <display_7SEG+0xe2>
	if(num < 0 || num >= 10) return;
 800108c:	bf00      	nop
 800108e:	e000      	b.n	8001092 <display_7SEG+0xe2>
		return;
 8001090:	bf00      	nop
}
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010c00 	.word	0x40010c00

0800109c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	; (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	; (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010c2:	f7ff fe0b 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f001 fb0d 	bl	80026e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ca:	f7ff fc69 	bl	80009a0 <main>
  bx lr
 80010ce:	4770      	bx	lr
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010d8:	0800277c 	.word	0x0800277c
  ldr r2, =_sbss
 80010dc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010e0:	200000f4 	.word	0x200000f4

080010e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_2_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x28>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x28>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f923 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fd62 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40022000 	.word	0x40022000

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f93b 	bl	80013ae <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f903 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000018 	.word	0x20000018
 800116c:	20000020 	.word	0x20000020
 8001170:	2000001c 	.word	0x2000001c

08001174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_IncTick+0x1c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x20>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <HAL_IncTick+0x20>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000020 	.word	0x20000020
 8001194:	200000f0 	.word	0x200000f0

08001198 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <HAL_GetTick+0x10>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	200000f0 	.word	0x200000f0

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4906      	ldr	r1, [pc, #24]	; (8001244 <__NVIC_EnableIRQ+0x34>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff90 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff2d 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff42 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff35 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa2 	bl	8001300 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b08b      	sub	sp, #44	; 0x2c
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013da:	e148      	b.n	800166e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013dc:	2201      	movs	r2, #1
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	f040 8137 	bne.w	8001668 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4aa3      	ldr	r2, [pc, #652]	; (800168c <HAL_GPIO_Init+0x2c4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d05e      	beq.n	80014c2 <HAL_GPIO_Init+0xfa>
 8001404:	4aa1      	ldr	r2, [pc, #644]	; (800168c <HAL_GPIO_Init+0x2c4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d875      	bhi.n	80014f6 <HAL_GPIO_Init+0x12e>
 800140a:	4aa1      	ldr	r2, [pc, #644]	; (8001690 <HAL_GPIO_Init+0x2c8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d058      	beq.n	80014c2 <HAL_GPIO_Init+0xfa>
 8001410:	4a9f      	ldr	r2, [pc, #636]	; (8001690 <HAL_GPIO_Init+0x2c8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d86f      	bhi.n	80014f6 <HAL_GPIO_Init+0x12e>
 8001416:	4a9f      	ldr	r2, [pc, #636]	; (8001694 <HAL_GPIO_Init+0x2cc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d052      	beq.n	80014c2 <HAL_GPIO_Init+0xfa>
 800141c:	4a9d      	ldr	r2, [pc, #628]	; (8001694 <HAL_GPIO_Init+0x2cc>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d869      	bhi.n	80014f6 <HAL_GPIO_Init+0x12e>
 8001422:	4a9d      	ldr	r2, [pc, #628]	; (8001698 <HAL_GPIO_Init+0x2d0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d04c      	beq.n	80014c2 <HAL_GPIO_Init+0xfa>
 8001428:	4a9b      	ldr	r2, [pc, #620]	; (8001698 <HAL_GPIO_Init+0x2d0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d863      	bhi.n	80014f6 <HAL_GPIO_Init+0x12e>
 800142e:	4a9b      	ldr	r2, [pc, #620]	; (800169c <HAL_GPIO_Init+0x2d4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d046      	beq.n	80014c2 <HAL_GPIO_Init+0xfa>
 8001434:	4a99      	ldr	r2, [pc, #612]	; (800169c <HAL_GPIO_Init+0x2d4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d85d      	bhi.n	80014f6 <HAL_GPIO_Init+0x12e>
 800143a:	2b12      	cmp	r3, #18
 800143c:	d82a      	bhi.n	8001494 <HAL_GPIO_Init+0xcc>
 800143e:	2b12      	cmp	r3, #18
 8001440:	d859      	bhi.n	80014f6 <HAL_GPIO_Init+0x12e>
 8001442:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <HAL_GPIO_Init+0x80>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	080014c3 	.word	0x080014c3
 800144c:	0800149d 	.word	0x0800149d
 8001450:	080014af 	.word	0x080014af
 8001454:	080014f1 	.word	0x080014f1
 8001458:	080014f7 	.word	0x080014f7
 800145c:	080014f7 	.word	0x080014f7
 8001460:	080014f7 	.word	0x080014f7
 8001464:	080014f7 	.word	0x080014f7
 8001468:	080014f7 	.word	0x080014f7
 800146c:	080014f7 	.word	0x080014f7
 8001470:	080014f7 	.word	0x080014f7
 8001474:	080014f7 	.word	0x080014f7
 8001478:	080014f7 	.word	0x080014f7
 800147c:	080014f7 	.word	0x080014f7
 8001480:	080014f7 	.word	0x080014f7
 8001484:	080014f7 	.word	0x080014f7
 8001488:	080014f7 	.word	0x080014f7
 800148c:	080014a5 	.word	0x080014a5
 8001490:	080014b9 	.word	0x080014b9
 8001494:	4a82      	ldr	r2, [pc, #520]	; (80016a0 <HAL_GPIO_Init+0x2d8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800149a:	e02c      	b.n	80014f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e029      	b.n	80014f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	3304      	adds	r3, #4
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e024      	b.n	80014f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	3308      	adds	r3, #8
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e01f      	b.n	80014f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	330c      	adds	r3, #12
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e01a      	b.n	80014f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ca:	2304      	movs	r3, #4
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e013      	b.n	80014f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d8:	2308      	movs	r3, #8
 80014da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	611a      	str	r2, [r3, #16]
          break;
 80014e2:	e009      	b.n	80014f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e4:	2308      	movs	r3, #8
 80014e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	615a      	str	r2, [r3, #20]
          break;
 80014ee:	e003      	b.n	80014f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e000      	b.n	80014f8 <HAL_GPIO_Init+0x130>
          break;
 80014f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2bff      	cmp	r3, #255	; 0xff
 80014fc:	d801      	bhi.n	8001502 <HAL_GPIO_Init+0x13a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	e001      	b.n	8001506 <HAL_GPIO_Init+0x13e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3304      	adds	r3, #4
 8001506:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2bff      	cmp	r3, #255	; 0xff
 800150c:	d802      	bhi.n	8001514 <HAL_GPIO_Init+0x14c>
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	e002      	b.n	800151a <HAL_GPIO_Init+0x152>
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	3b08      	subs	r3, #8
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	210f      	movs	r1, #15
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	6a39      	ldr	r1, [r7, #32]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	431a      	orrs	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8090 	beq.w	8001668 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001548:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <HAL_GPIO_Init+0x2dc>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a55      	ldr	r2, [pc, #340]	; (80016a4 <HAL_GPIO_Init+0x2dc>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_GPIO_Init+0x2dc>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001560:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <HAL_GPIO_Init+0x2e0>)
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a49      	ldr	r2, [pc, #292]	; (80016ac <HAL_GPIO_Init+0x2e4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_GPIO_Init+0x1e0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a48      	ldr	r2, [pc, #288]	; (80016b0 <HAL_GPIO_Init+0x2e8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1dc>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a47      	ldr	r2, [pc, #284]	; (80016b4 <HAL_GPIO_Init+0x2ec>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_Init+0x1d8>
 800159c:	2302      	movs	r3, #2
 800159e:	e004      	b.n	80015aa <HAL_GPIO_Init+0x1e2>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e002      	b.n	80015aa <HAL_GPIO_Init+0x1e2>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_GPIO_Init+0x1e2>
 80015a8:	2300      	movs	r3, #0
 80015aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ac:	f002 0203 	and.w	r2, r2, #3
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	4093      	lsls	r3, r2
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ba:	493b      	ldr	r1, [pc, #236]	; (80016a8 <HAL_GPIO_Init+0x2e0>)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d4:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4937      	ldr	r1, [pc, #220]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e2:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4933      	ldr	r1, [pc, #204]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	492d      	ldr	r1, [pc, #180]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800160a:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	4929      	ldr	r1, [pc, #164]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 8001614:	4013      	ands	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	4923      	ldr	r1, [pc, #140]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	491f      	ldr	r1, [pc, #124]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 800163c:	4013      	ands	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	4919      	ldr	r1, [pc, #100]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	60cb      	str	r3, [r1, #12]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4915      	ldr	r1, [pc, #84]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 8001664:	4013      	ands	r3, r2
 8001666:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	3301      	adds	r3, #1
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	f47f aeaf 	bne.w	80013dc <HAL_GPIO_Init+0x14>
  }
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	372c      	adds	r7, #44	; 0x2c
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	10320000 	.word	0x10320000
 8001690:	10310000 	.word	0x10310000
 8001694:	10220000 	.word	0x10220000
 8001698:	10210000 	.word	0x10210000
 800169c:	10120000 	.word	0x10120000
 80016a0:	10110000 	.word	0x10110000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	40010800 	.word	0x40010800
 80016b0:	40010c00 	.word	0x40010c00
 80016b4:	40011000 	.word	0x40011000
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e001      	b.n	80016de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	807b      	strh	r3, [r7, #2]
 80016f6:	4613      	mov	r3, r2
 80016f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fa:	787b      	ldrb	r3, [r7, #1]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001706:	e003      	b.n	8001710 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	041a      	lsls	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	611a      	str	r2, [r3, #16]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800172c:	887a      	ldrh	r2, [r7, #2]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	041a      	lsls	r2, r3, #16
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43d9      	mvns	r1, r3
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	400b      	ands	r3, r1
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	611a      	str	r2, [r3, #16]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e26c      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8087 	beq.w	800187a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800176c:	4b92      	ldr	r3, [pc, #584]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b04      	cmp	r3, #4
 8001776:	d00c      	beq.n	8001792 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001778:	4b8f      	ldr	r3, [pc, #572]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d112      	bne.n	80017aa <HAL_RCC_OscConfig+0x5e>
 8001784:	4b8c      	ldr	r3, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d10b      	bne.n	80017aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d06c      	beq.n	8001878 <HAL_RCC_OscConfig+0x12c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d168      	bne.n	8001878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e246      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x76>
 80017b4:	4b80      	ldr	r3, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a7f      	ldr	r2, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e02e      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7a      	ldr	r2, [pc, #488]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0xbc>
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a71      	ldr	r2, [pc, #452]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6f      	ldr	r3, [pc, #444]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6e      	ldr	r2, [pc, #440]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6a      	ldr	r2, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a67      	ldr	r2, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fcb6 	bl	8001198 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fcb2 	bl	8001198 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1fa      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xe4>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fca2 	bl	8001198 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fc9e 	bl	8001198 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1e6      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x10c>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d063      	beq.n	800194e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001886:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001892:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b08      	cmp	r3, #8
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x18c>
 800189e:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1ba      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4939      	ldr	r1, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e03a      	b.n	800194e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff fc57 	bl	8001198 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fc53 	bl	8001198 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e19b      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4927      	ldr	r1, [pc, #156]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fc36 	bl	8001198 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fc32 	bl	8001198 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e17a      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d03a      	beq.n	80019d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d019      	beq.n	8001996 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fc16 	bl	8001198 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fc12 	bl	8001198 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e15a      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f000 faa6 	bl	8001ee0 <RCC_Delay>
 8001994:	e01c      	b.n	80019d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff fbfc 	bl	8001198 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a2:	e00f      	b.n	80019c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fbf8 	bl	8001198 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d908      	bls.n	80019c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e140      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	42420000 	.word	0x42420000
 80019c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e9      	bne.n	80019a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80a6 	beq.w	8001b2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10d      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a93      	ldr	r2, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b91      	ldr	r3, [pc, #580]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a16:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a8a      	ldr	r2, [pc, #552]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fbb9 	bl	8001198 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7ff fbb5 	bl	8001198 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0fd      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x312>
 8001a50:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e02d      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a72      	ldr	r2, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	e01c      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x356>
 8001a88:	4b6d      	ldr	r3, [pc, #436]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a6c      	ldr	r2, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a69      	ldr	r2, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6213      	str	r3, [r2, #32]
 8001aa0:	e00b      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a66      	ldr	r2, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a63      	ldr	r2, [pc, #396]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb69 	bl	8001198 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fb65 	bl	8001198 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0ab      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ee      	beq.n	8001aca <HAL_RCC_OscConfig+0x37e>
 8001aec:	e014      	b.n	8001b18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fb53 	bl	8001198 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fb4f 	bl	8001198 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e095      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1e:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a47      	ldr	r2, [pc, #284]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8081 	beq.w	8001c36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b34:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d061      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d146      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb23 	bl	8001198 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fb1f 	bl	8001198 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e067      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	492d      	ldr	r1, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a19      	ldr	r1, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7ff faf3 	bl	8001198 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff faef 	bl	8001198 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e037      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x46a>
 8001bd4:	e02f      	b.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fadc 	bl	8001198 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff fad8 	bl	8001198 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e020      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x498>
 8001c02:	e018      	b.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e013      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	42420060 	.word	0x42420060

08001c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0d0      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d910      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4965      	ldr	r1, [pc, #404]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0b8      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	494d      	ldr	r1, [pc, #308]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d040      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d115      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e073      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e06b      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4936      	ldr	r1, [pc, #216]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fa2c 	bl	8001198 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff fa28 	bl	8001198 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e053      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d210      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4922      	ldr	r1, [pc, #136]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e032      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4916      	ldr	r1, [pc, #88]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dda:	f000 f821 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	490a      	ldr	r1, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	5ccb      	ldrb	r3, [r1, r3]
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1cc>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1d0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f98a 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08002764 	.word	0x08002764
 8001e18:	20000018 	.word	0x20000018
 8001e1c:	2000001c 	.word	0x2000001c

08001e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b490      	push	{r4, r7}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e28:	1d3c      	adds	r4, r7, #4
 8001e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e30:	f240 2301 	movw	r3, #513	; 0x201
 8001e34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x40>
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x46>
 8001e5e:	e02d      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e62:	623b      	str	r3, [r7, #32]
      break;
 8001e64:	e02d      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	0c9b      	lsrs	r3, r3, #18
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e72:	4413      	add	r3, r2
 8001e74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c5b      	lsrs	r3, r3, #17
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e92:	4413      	add	r3, r2
 8001e94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9e:	fb02 f203 	mul.w	r2, r2, r3
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	e004      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	623b      	str	r3, [r7, #32]
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebe:	623b      	str	r3, [r7, #32]
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc90      	pop	{r4, r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	08002754 	.word	0x08002754
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	003d0900 	.word	0x003d0900

08001ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <RCC_Delay+0x34>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <RCC_Delay+0x38>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	0a5b      	lsrs	r3, r3, #9
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001efc:	bf00      	nop
  }
  while (Delay --);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	60fa      	str	r2, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f9      	bne.n	8001efc <RCC_Delay+0x1c>
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000018 	.word	0x20000018
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e041      	b.n	8001fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fe74 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3304      	adds	r3, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f000 fa6a 	bl	8002434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d001      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e035      	b.n	8002040 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_TIM_Base_Start_IT+0x90>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_TIM_Base_Start_IT+0x4e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffe:	d004      	beq.n	800200a <HAL_TIM_Base_Start_IT+0x4e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_TIM_Base_Start_IT+0x94>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d111      	bne.n	800202e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b06      	cmp	r3, #6
 800201a:	d010      	beq.n	800203e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202c:	e007      	b.n	800203e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40000400 	.word	0x40000400

08002054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b02      	cmp	r3, #2
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0202 	mvn.w	r2, #2
 8002080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f9b1 	bl	80023fe <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9a4 	bl	80023ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f9b3 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d122      	bne.n	8002104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d11b      	bne.n	8002104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0204 	mvn.w	r2, #4
 80020d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f987 	bl	80023fe <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f97a 	bl	80023ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f989 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b08      	cmp	r3, #8
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b08      	cmp	r3, #8
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0208 	mvn.w	r2, #8
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2204      	movs	r2, #4
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f95d 	bl	80023fe <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f950 	bl	80023ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f95f 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b10      	cmp	r3, #16
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b10      	cmp	r3, #16
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0210 	mvn.w	r2, #16
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2208      	movs	r2, #8
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f933 	bl	80023fe <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f926 	bl	80023ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f935 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0201 	mvn.w	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fdee 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b80      	cmp	r3, #128	; 0x80
 80021e4:	d10e      	bne.n	8002204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f0:	2b80      	cmp	r3, #128	; 0x80
 80021f2:	d107      	bne.n	8002204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa67 	bl	80026d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b40      	cmp	r3, #64	; 0x40
 8002210:	d10e      	bne.n	8002230 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d107      	bne.n	8002230 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8f9 	bl	8002422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b20      	cmp	r3, #32
 800223c:	d10e      	bne.n	800225c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b20      	cmp	r3, #32
 800224a:	d107      	bne.n	800225c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0220 	mvn.w	r2, #32
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fa32 	bl	80026c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_TIM_ConfigClockSource+0x18>
 8002278:	2302      	movs	r3, #2
 800227a:	e0b3      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x180>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800229a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b4:	d03e      	beq.n	8002334 <HAL_TIM_ConfigClockSource+0xd0>
 80022b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ba:	f200 8087 	bhi.w	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	f000 8085 	beq.w	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ca:	d87f      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022cc:	2b70      	cmp	r3, #112	; 0x70
 80022ce:	d01a      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0xa2>
 80022d0:	2b70      	cmp	r3, #112	; 0x70
 80022d2:	d87b      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022d4:	2b60      	cmp	r3, #96	; 0x60
 80022d6:	d050      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x116>
 80022d8:	2b60      	cmp	r3, #96	; 0x60
 80022da:	d877      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022dc:	2b50      	cmp	r3, #80	; 0x50
 80022de:	d03c      	beq.n	800235a <HAL_TIM_ConfigClockSource+0xf6>
 80022e0:	2b50      	cmp	r3, #80	; 0x50
 80022e2:	d873      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d058      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x136>
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d86f      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022ec:	2b30      	cmp	r3, #48	; 0x30
 80022ee:	d064      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x156>
 80022f0:	2b30      	cmp	r3, #48	; 0x30
 80022f2:	d86b      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d060      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x156>
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d867      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05c      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x156>
 8002300:	2b10      	cmp	r3, #16
 8002302:	d05a      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002304:	e062      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6899      	ldr	r1, [r3, #8]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f000 f95c 	bl	80025d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002328:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	609a      	str	r2, [r3, #8]
      break;
 8002332:	e04e      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f000 f945 	bl	80025d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002356:	609a      	str	r2, [r3, #8]
      break;
 8002358:	e03b      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	f000 f8bc 	bl	80024e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2150      	movs	r1, #80	; 0x50
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f913 	bl	800259e <TIM_ITRx_SetConfig>
      break;
 8002378:	e02b      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	461a      	mov	r2, r3
 8002388:	f000 f8da 	bl	8002540 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2160      	movs	r1, #96	; 0x60
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f903 	bl	800259e <TIM_ITRx_SetConfig>
      break;
 8002398:	e01b      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f000 f89c 	bl	80024e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2140      	movs	r1, #64	; 0x40
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f8f3 	bl	800259e <TIM_ITRx_SetConfig>
      break;
 80023b8:	e00b      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f000 f8ea 	bl	800259e <TIM_ITRx_SetConfig>
        break;
 80023ca:	e002      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023cc:	bf00      	nop
 80023ce:	e000      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a25      	ldr	r2, [pc, #148]	; (80024dc <TIM_Base_SetConfig+0xa8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <TIM_Base_SetConfig+0x28>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002452:	d003      	beq.n	800245c <TIM_Base_SetConfig+0x28>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <TIM_Base_SetConfig+0xac>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d108      	bne.n	800246e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <TIM_Base_SetConfig+0xa8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <TIM_Base_SetConfig+0x52>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247c:	d003      	beq.n	8002486 <TIM_Base_SetConfig+0x52>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <TIM_Base_SetConfig+0xac>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d108      	bne.n	8002498 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <TIM_Base_SetConfig+0xa8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d103      	bne.n	80024cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	615a      	str	r2, [r3, #20]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40000400 	.word	0x40000400

080024e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f023 0201 	bic.w	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800250e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f023 030a 	bic.w	r3, r3, #10
 8002520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	621a      	str	r2, [r3, #32]
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f023 0210 	bic.w	r2, r3, #16
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800256a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	031b      	lsls	r3, r3, #12
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800257c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	621a      	str	r2, [r3, #32]
}
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f043 0307 	orr.w	r3, r3, #7
 80025c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b087      	sub	sp, #28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	021a      	lsls	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	609a      	str	r2, [r3, #8]
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002624:	2302      	movs	r3, #2
 8002626:	e041      	b.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d004      	beq.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10c      	bne.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	4313      	orrs	r3, r2
 8002690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400

080026c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <__libc_init_array>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	2600      	movs	r6, #0
 80026e8:	4d0c      	ldr	r5, [pc, #48]	; (800271c <__libc_init_array+0x38>)
 80026ea:	4c0d      	ldr	r4, [pc, #52]	; (8002720 <__libc_init_array+0x3c>)
 80026ec:	1b64      	subs	r4, r4, r5
 80026ee:	10a4      	asrs	r4, r4, #2
 80026f0:	42a6      	cmp	r6, r4
 80026f2:	d109      	bne.n	8002708 <__libc_init_array+0x24>
 80026f4:	f000 f822 	bl	800273c <_init>
 80026f8:	2600      	movs	r6, #0
 80026fa:	4d0a      	ldr	r5, [pc, #40]	; (8002724 <__libc_init_array+0x40>)
 80026fc:	4c0a      	ldr	r4, [pc, #40]	; (8002728 <__libc_init_array+0x44>)
 80026fe:	1b64      	subs	r4, r4, r5
 8002700:	10a4      	asrs	r4, r4, #2
 8002702:	42a6      	cmp	r6, r4
 8002704:	d105      	bne.n	8002712 <__libc_init_array+0x2e>
 8002706:	bd70      	pop	{r4, r5, r6, pc}
 8002708:	f855 3b04 	ldr.w	r3, [r5], #4
 800270c:	4798      	blx	r3
 800270e:	3601      	adds	r6, #1
 8002710:	e7ee      	b.n	80026f0 <__libc_init_array+0xc>
 8002712:	f855 3b04 	ldr.w	r3, [r5], #4
 8002716:	4798      	blx	r3
 8002718:	3601      	adds	r6, #1
 800271a:	e7f2      	b.n	8002702 <__libc_init_array+0x1e>
 800271c:	08002774 	.word	0x08002774
 8002720:	08002774 	.word	0x08002774
 8002724:	08002774 	.word	0x08002774
 8002728:	08002778 	.word	0x08002778

0800272c <memset>:
 800272c:	4603      	mov	r3, r0
 800272e:	4402      	add	r2, r0
 8002730:	4293      	cmp	r3, r2
 8002732:	d100      	bne.n	8002736 <memset+0xa>
 8002734:	4770      	bx	lr
 8002736:	f803 1b01 	strb.w	r1, [r3], #1
 800273a:	e7f9      	b.n	8002730 <memset+0x4>

0800273c <_init>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr

08002748 <_fini>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr
